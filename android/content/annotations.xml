<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.content.AbstractThreadedSyncAdapter boolean onUnsyncableAccount()">
    <annotation name="androidx.annotation.MainThread"/>
  </item>
  <item name="android.content.ComponentCallbacks2 void onTrimMemory(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE, android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE, android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND, android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN, android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL, android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW, android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE}" />
    </annotation>
  </item>
  <item name="android.content.ContentResolver android.database.Cursor query(android.net.Uri, java.lang.String[], android.os.Bundle, android.os.CancellationSignal) 0">
    <annotation name="androidx.annotation.RequiresPermission.Read"/>
  </item>
  <item name="android.content.ContentResolver android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String) 0">
    <annotation name="androidx.annotation.RequiresPermission.Read"/>
  </item>
  <item name="android.content.ContentResolver android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal) 0">
    <annotation name="androidx.annotation.RequiresPermission.Read"/>
  </item>
  <item name="android.content.ContentResolver android.net.Uri insert(android.net.Uri, android.content.ContentValues) 0">
    <annotation name="androidx.annotation.RequiresPermission.Write"/>
  </item>
  <item name="android.content.ContentResolver android.net.Uri insert(android.net.Uri, android.content.ContentValues, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission.Write"/>
  </item>
  <item name="android.content.ContentResolver int bulkInsert(android.net.Uri, android.content.ContentValues[]) 0">
    <annotation name="androidx.annotation.RequiresPermission.Write"/>
  </item>
  <item name="android.content.ContentResolver int delete(android.net.Uri, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission.Write"/>
  </item>
  <item name="android.content.ContentResolver int delete(android.net.Uri, java.lang.String, java.lang.String[]) 0">
    <annotation name="androidx.annotation.RequiresPermission.Write"/>
  </item>
  <item name="android.content.ContentResolver int update(android.net.Uri, android.content.ContentValues, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission.Write"/>
  </item>
  <item name="android.content.ContentResolver int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]) 0">
    <annotation name="androidx.annotation.RequiresPermission.Write"/>
  </item>
  <item name="android.content.ContentResolver void notifyChange(android.net.Uri, android.database.ContentObserver, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}" />
    </annotation>
  </item>
  <item name="android.content.ContentResolver void notifyChange(java.util.Collection<android.net.Uri>, android.database.ContentObserver, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.ContentResolver.NOTIFY_SYNC_TO_NETWORK, android.content.ContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS, android.content.ContentResolver.NOTIFY_INSERT, android.content.ContentResolver.NOTIFY_UPDATE, android.content.ContentResolver.NOTIFY_DELETE}" />
    </annotation>
  </item>
  <item name="android.content.ContentResolver void releasePersistableUriPermission(android.net.Uri, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.ContentResolver void takePersistableUriPermission(android.net.Uri, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context android.content.Context createPackageContext(java.lang.String, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.CONTEXT_INCLUDE_CODE, android.content.Context.CONTEXT_IGNORE_SECURITY, android.content.Context.CONTEXT_RESTRICTED}" />
    </annotation>
  </item>
  <item name="android.content.Context android.content.Context createWindowContext(int, android.os.Bundle) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_DRAWN_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_WALLPAPER}" />
    </annotation>
  </item>
  <item name="android.content.Context android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Context android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler, int) 4">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Context android.content.SharedPreferences getSharedPreferences(java.lang.String, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_MULTI_PROCESS}" />
    </annotation>
  </item>
  <item name="android.content.Context android.content.res.ColorStateList getColorStateList(int) 0">
    <annotation name="androidx.annotation.ColorRes"/>
  </item>
  <item name="android.content.Context android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[]) 1">
    <annotation name="androidx.annotation.StyleableRes"/>
  </item>
  <item name="android.content.Context android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int) 1">
    <annotation name="androidx.annotation.StyleableRes"/>
  </item>
  <item name="android.content.Context android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int) 2">
    <annotation name="androidx.annotation.AttrRes"/>
  </item>
  <item name="android.content.Context android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int) 3">
    <annotation name="androidx.annotation.StyleRes"/>
  </item>
  <item name="android.content.Context android.content.res.TypedArray obtainStyledAttributes(int, int[]) 0">
    <annotation name="androidx.annotation.StyleRes"/>
  </item>
  <item name="android.content.Context android.content.res.TypedArray obtainStyledAttributes(int, int[]) 1">
    <annotation name="androidx.annotation.StyleableRes"/>
  </item>
  <item name="android.content.Context android.content.res.TypedArray obtainStyledAttributes(int[]) 0">
    <annotation name="androidx.annotation.StyleableRes"/>
  </item>
  <item name="android.content.Context android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_ENABLE_WRITE_AHEAD_LOGGING, android.content.Context.MODE_NO_LOCALIZED_COLLATORS}" />
    </annotation>
  </item>
  <item name="android.content.Context android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory, android.database.DatabaseErrorHandler) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_ENABLE_WRITE_AHEAD_LOGGING, android.content.Context.MODE_NO_LOCALIZED_COLLATORS}" />
    </annotation>
  </item>
  <item name="android.content.Context android.graphics.drawable.Drawable getDrawable(int) 0">
    <annotation name="androidx.annotation.DrawableRes"/>
  </item>
  <item name="android.content.Context boolean bindIsolatedService(android.content.Intent, int, java.lang.String, java.util.concurrent.Executor, android.content.ServiceConnection) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context boolean bindIsolatedService(android.content.Intent, int, java.lang.String, java.util.concurrent.Executor, android.content.ServiceConnection) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.BIND_AUTO_CREATE, android.content.Context.BIND_DEBUG_UNBIND, android.content.Context.BIND_NOT_FOREGROUND, android.content.Context.BIND_ABOVE_CLIENT, android.content.Context.BIND_ALLOW_OOM_MANAGEMENT, android.content.Context.BIND_WAIVE_PRIORITY, android.content.Context.BIND_IMPORTANT, android.content.Context.BIND_ADJUST_WITH_ACTIVITY, android.content.Context.BIND_NOT_PERCEPTIBLE, android.content.Context.BIND_INCLUDE_CAPABILITIES}" />
    </annotation>
  </item>
  <item name="android.content.Context boolean bindService(android.content.Intent, android.content.ServiceConnection, int) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context boolean bindService(android.content.Intent, android.content.ServiceConnection, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.BIND_AUTO_CREATE, android.content.Context.BIND_DEBUG_UNBIND, android.content.Context.BIND_NOT_FOREGROUND, android.content.Context.BIND_ABOVE_CLIENT, android.content.Context.BIND_ALLOW_OOM_MANAGEMENT, android.content.Context.BIND_WAIVE_PRIORITY, android.content.Context.BIND_IMPORTANT, android.content.Context.BIND_ADJUST_WITH_ACTIVITY, android.content.Context.BIND_NOT_PERCEPTIBLE, android.content.Context.BIND_INCLUDE_CAPABILITIES}" />
    </annotation>
  </item>
  <item name="android.content.Context boolean bindService(android.content.Intent, int, java.util.concurrent.Executor, android.content.ServiceConnection) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context boolean bindService(android.content.Intent, int, java.util.concurrent.Executor, android.content.ServiceConnection) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.BIND_AUTO_CREATE, android.content.Context.BIND_DEBUG_UNBIND, android.content.Context.BIND_NOT_FOREGROUND, android.content.Context.BIND_ABOVE_CLIENT, android.content.Context.BIND_ALLOW_OOM_MANAGEMENT, android.content.Context.BIND_WAIVE_PRIORITY, android.content.Context.BIND_IMPORTANT, android.content.Context.BIND_ADJUST_WITH_ACTIVITY, android.content.Context.BIND_NOT_PERCEPTIBLE, android.content.Context.BIND_INCLUDE_CAPABILITIES}" />
    </annotation>
  </item>
  <item name="android.content.Context boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.INTERACT_ACROSS_USERS&quot;, &quot;android.permission.INTERACT_ACROSS_PROFILES&quot;}" />
    </annotation>
  </item>
  <item name="android.content.Context boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context int checkCallingOrSelfPermission(java.lang.String)">
    <annotation name="androidx.annotation.CheckResult">
      <val name="suggest" val="&quot;#enforceCallingOrSelfPermission(String,String)&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkCallingOrSelfUriPermission(android.net.Uri, int)">
    <annotation name="androidx.annotation.CheckResult">
      <val name="suggest" val="&quot;#enforceCallingOrSelfUriPermission(Uri,int,String)&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkCallingOrSelfUriPermission(android.net.Uri, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkCallingPermission(java.lang.String)">
    <annotation name="androidx.annotation.CheckResult">
      <val name="suggest" val="&quot;#enforceCallingPermission(String,String)&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkCallingUriPermission(android.net.Uri, int)">
    <annotation name="androidx.annotation.CheckResult">
      <val name="suggest" val="&quot;#enforceCallingUriPermission(Uri,int,String)&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkCallingUriPermission(android.net.Uri, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkPermission(java.lang.String, int, int)">
    <annotation name="androidx.annotation.CheckResult">
      <val name="suggest" val="&quot;#enforcePermission(String,int,int,String)&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkSelfPermission(java.lang.String)">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkUriPermission(android.net.Uri, int, int, int)">
    <annotation name="androidx.annotation.CheckResult">
      <val name="suggest" val="&quot;#enforceUriPermission(Uri,int,int,String)&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkUriPermission(android.net.Uri, int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)">
    <annotation name="androidx.annotation.CheckResult">
      <val name="suggest" val="&quot;#enforceUriPermission(Uri,String,String,int,int,int,String)&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.content.pm.PackageManager.PERMISSION_GRANTED, android.content.pm.PackageManager.PERMISSION_DENIED}" />
    </annotation>
  </item>
  <item name="android.content.Context int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int) 5">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context int getColor(int)">
    <annotation name="androidx.annotation.ColorInt"/>
  </item>
  <item name="android.content.Context int getColor(int) 0">
    <annotation name="androidx.annotation.ColorRes"/>
  </item>
  <item name="android.content.Context java.io.File getDir(java.lang.String, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_APPEND}" />
    </annotation>
  </item>
  <item name="android.content.Context java.io.FileOutputStream openFileOutput(java.lang.String, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Context.MODE_PRIVATE, android.content.Context.MODE_WORLD_READABLE, android.content.Context.MODE_WORLD_WRITEABLE, android.content.Context.MODE_APPEND}" />
    </annotation>
  </item>
  <item name="android.content.Context java.lang.CharSequence getText(int) 0">
    <annotation name="androidx.annotation.StringRes"/>
  </item>
  <item name="android.content.Context java.lang.Object getSystemService(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.content.Context.POWER_SERVICE, android.content.Context.WINDOW_SERVICE, android.content.Context.LAYOUT_INFLATER_SERVICE, android.content.Context.ACCOUNT_SERVICE, android.content.Context.ACTIVITY_SERVICE, android.content.Context.ALARM_SERVICE, android.content.Context.NOTIFICATION_SERVICE, android.content.Context.ACCESSIBILITY_SERVICE, android.content.Context.CAPTIONING_SERVICE, android.content.Context.KEYGUARD_SERVICE, android.content.Context.LOCATION_SERVICE, android.content.Context.SEARCH_SERVICE, android.content.Context.SENSOR_SERVICE, android.content.Context.STORAGE_SERVICE, android.content.Context.STORAGE_STATS_SERVICE, android.content.Context.WALLPAPER_SERVICE, android.content.Context.VIBRATOR_SERVICE, android.content.Context.CONNECTIVITY_SERVICE, android.content.Context.IPSEC_SERVICE, android.content.Context.VPN_MANAGEMENT_SERVICE, android.content.Context.NETWORK_STATS_SERVICE, android.content.Context.WIFI_SERVICE, android.content.Context.WIFI_AWARE_SERVICE, android.content.Context.WIFI_P2P_SERVICE, android.content.Context.WIFI_RTT_RANGING_SERVICE, android.content.Context.NSD_SERVICE, android.content.Context.AUDIO_SERVICE, android.content.Context.FINGERPRINT_SERVICE, android.content.Context.BIOMETRIC_SERVICE, android.content.Context.MEDIA_ROUTER_SERVICE, android.content.Context.TELEPHONY_SERVICE, android.content.Context.TELEPHONY_SUBSCRIPTION_SERVICE, android.content.Context.CARRIER_CONFIG_SERVICE, android.content.Context.EUICC_SERVICE, android.content.Context.TELECOM_SERVICE, android.content.Context.CLIPBOARD_SERVICE, android.content.Context.INPUT_METHOD_SERVICE, android.content.Context.TEXT_SERVICES_MANAGER_SERVICE, android.content.Context.TEXT_CLASSIFICATION_SERVICE, android.content.Context.APPWIDGET_SERVICE, android.content.Context.DROPBOX_SERVICE, android.content.Context.DEVICE_POLICY_SERVICE, android.content.Context.UI_MODE_SERVICE, android.content.Context.DOWNLOAD_SERVICE, android.content.Context.NFC_SERVICE, android.content.Context.BLUETOOTH_SERVICE, android.content.Context.USB_SERVICE, android.content.Context.LAUNCHER_APPS_SERVICE, android.content.Context.INPUT_SERVICE, android.content.Context.DISPLAY_SERVICE, android.content.Context.USER_SERVICE, android.content.Context.RESTRICTIONS_SERVICE, android.content.Context.APP_OPS_SERVICE, android.content.Context.ROLE_SERVICE, android.content.Context.CAMERA_SERVICE, android.content.Context.PRINT_SERVICE, android.content.Context.CONSUMER_IR_SERVICE, android.content.Context.TV_INPUT_SERVICE, android.content.Context.USAGE_STATS_SERVICE, android.content.Context.MEDIA_SESSION_SERVICE, android.content.Context.BATTERY_SERVICE, android.content.Context.JOB_SCHEDULER_SERVICE, android.content.Context.MEDIA_PROJECTION_SERVICE, android.content.Context.MIDI_SERVICE, android.content.Context.HARDWARE_PROPERTIES_SERVICE, android.content.Context.SHORTCUT_SERVICE, android.content.Context.SYSTEM_HEALTH_SERVICE, android.content.Context.COMPANION_DEVICE_SERVICE, android.content.Context.CROSS_PROFILE_APPS_SERVICE}" />
    </annotation>
  </item>
  <item name="android.content.Context java.lang.String getString(int) 0">
    <annotation name="androidx.annotation.StringRes"/>
  </item>
  <item name="android.content.Context java.lang.String getString(int, java.lang.Object...) 0">
    <annotation name="androidx.annotation.StringRes"/>
  </item>
  <item name="android.content.Context void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context void enforceCallingUriPermission(android.net.Uri, int, java.lang.String) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String) 5">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context void grantUriPermission(java.lang.String, android.net.Uri, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context void removeStickyBroadcast(android.content.Intent)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.BROADCAST_STICKY&quot;" />
    </annotation>
  </item>
  <item name="android.content.Context void removeStickyBroadcast(android.content.Intent) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.INTERACT_ACROSS_USERS&quot;, &quot;android.permission.BROADCAST_STICKY&quot;}" />
    </annotation>
  </item>
  <item name="android.content.Context void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void revokeUriPermission(android.net.Uri, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context void revokeUriPermission(java.lang.String, android.net.Uri, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION}" />
    </annotation>
  </item>
  <item name="android.content.Context void sendBroadcast(android.content.Intent) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendBroadcast(android.content.Intent, java.lang.String) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.INTERACT_ACROSS_USERS&quot;" />
    </annotation>
  </item>
  <item name="android.content.Context void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.INTERACT_ACROSS_USERS&quot;" />
    </annotation>
  </item>
  <item name="android.content.Context void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendOrderedBroadcast(android.content.Intent, java.lang.String) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.INTERACT_ACROSS_USERS&quot;" />
    </annotation>
  </item>
  <item name="android.content.Context void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendStickyBroadcast(android.content.Intent)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.BROADCAST_STICKY&quot;" />
    </annotation>
  </item>
  <item name="android.content.Context void sendStickyBroadcast(android.content.Intent) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendStickyBroadcast(android.content.Intent, android.os.Bundle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.BROADCAST_STICKY&quot;" />
    </annotation>
  </item>
  <item name="android.content.Context void sendStickyBroadcast(android.content.Intent, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.INTERACT_ACROSS_USERS&quot;, &quot;android.permission.BROADCAST_STICKY&quot;}" />
    </annotation>
  </item>
  <item name="android.content.Context void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.BROADCAST_STICKY&quot;" />
    </annotation>
  </item>
  <item name="android.content.Context void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.INTERACT_ACROSS_USERS&quot;, &quot;android.permission.BROADCAST_STICKY&quot;}" />
    </annotation>
  </item>
  <item name="android.content.Context void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void setTheme(int) 0">
    <annotation name="androidx.annotation.StyleRes"/>
  </item>
  <item name="android.content.Context void startActivities(android.content.Intent[]) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void startActivities(android.content.Intent[], android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void startActivity(android.content.Intent) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void startActivity(android.content.Intent, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Context void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.ContextWrapper android.content.Context createWindowContext(int, android.os.Bundle) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_DRAWN_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_WALLPAPER}" />
    </annotation>
  </item>
  <item name="android.content.ContextWrapper void sendOrderedBroadcast(android.content.Intent, int, java.lang.String, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, java.lang.String, android.os.Bundle, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.ContextWrapper void sendOrderedBroadcast(android.content.Intent, java.lang.String, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) 0">
    <annotation name="androidx.annotation.RequiresPermission"/>
  </item>
  <item name="android.content.Intent ACTION_VIEW_PERMISSION_USAGE">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.START_VIEW_PERMISSION_USAGE&quot;" />
    </annotation>
  </item>
  <item name="android.content.Intent android.content.Intent addFlags(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, android.content.Intent.FLAG_ACTIVITY_REQUIRE_DEFAULT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Intent android.content.Intent parseUri(java.lang.String, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.URI_ALLOW_UNSAFE, android.content.Intent.URI_ANDROID_APP_SCHEME, android.content.Intent.URI_INTENT_SCHEME}" />
    </annotation>
  </item>
  <item name="android.content.Intent android.content.Intent setFlags(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, android.content.Intent.FLAG_ACTIVITY_REQUIRE_DEFAULT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Intent android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.pm.PackageManager.GET_META_DATA, android.content.pm.PackageManager.GET_SHARED_LIBRARY_FILES, android.content.pm.PackageManager.MATCH_ALL, android.content.pm.PackageManager.MATCH_DEFAULT_ONLY, android.content.pm.PackageManager.MATCH_DISABLED_COMPONENTS, android.content.pm.PackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AUTO, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE, android.content.pm.PackageManager.MATCH_DIRECT_BOOT_UNAWARE, android.content.pm.PackageManager.MATCH_SYSTEM_ONLY, android.content.pm.PackageManager.MATCH_UNINSTALLED_PACKAGES, android.content.pm.PackageManager.GET_DISABLED_COMPONENTS, android.content.pm.PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS, android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES}" />
    </annotation>
  </item>
  <item name="android.content.Intent int fillIn(android.content.Intent, int)">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}" />
    </annotation>
  </item>
  <item name="android.content.Intent int fillIn(android.content.Intent, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FILL_IN_ACTION, android.content.Intent.FILL_IN_DATA, android.content.Intent.FILL_IN_CATEGORIES, android.content.Intent.FILL_IN_COMPONENT, android.content.Intent.FILL_IN_PACKAGE, android.content.Intent.FILL_IN_SOURCE_BOUNDS, android.content.Intent.FILL_IN_SELECTOR, android.content.Intent.FILL_IN_CLIP_DATA}" />
    </annotation>
  </item>
  <item name="android.content.Intent int getFlags()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, android.content.Intent.FLAG_ACTIVITY_REQUIRE_DEFAULT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Intent java.lang.String toUri(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.URI_ALLOW_UNSAFE, android.content.Intent.URI_ANDROID_APP_SCHEME, android.content.Intent.URI_INTENT_SCHEME}" />
    </annotation>
  </item>
  <item name="android.content.Intent void removeFlags(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION, android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION, android.content.Intent.FLAG_FROM_BACKGROUND, android.content.Intent.FLAG_DEBUG_LOG_RESOLUTION, android.content.Intent.FLAG_EXCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_INCLUDE_STOPPED_PACKAGES, android.content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, android.content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, android.content.Intent.FLAG_ACTIVITY_MATCH_EXTERNAL, android.content.Intent.FLAG_ACTIVITY_NO_HISTORY, android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP, android.content.Intent.FLAG_ACTIVITY_NEW_TASK, android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK, android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP, android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT, android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED, android.content.Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT, android.content.Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, android.content.Intent.FLAG_ACTIVITY_NO_USER_ACTION, android.content.Intent.FLAG_ACTIVITY_REORDER_TO_FRONT, android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION, android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK, android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME, android.content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS, android.content.Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, android.content.Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, android.content.Intent.FLAG_ACTIVITY_REQUIRE_DEFAULT, android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY, android.content.Intent.FLAG_RECEIVER_REPLACE_PENDING, android.content.Intent.FLAG_RECEIVER_FOREGROUND, android.content.Intent.FLAG_RECEIVER_NO_ABORT, android.content.Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS}" />
    </annotation>
  </item>
  <item name="android.content.Intent.ShortcutIconResource android.content.Intent.ShortcutIconResource fromContext(android.content.Context, int) 1">
    <annotation name="androidx.annotation.AnyRes"/>
  </item>
  <item name="android.content.RestrictionEntry void setChoiceEntries(android.content.Context, int) 1">
    <annotation name="androidx.annotation.ArrayRes"/>
  </item>
  <item name="android.content.RestrictionEntry void setChoiceValues(android.content.Context, int) 1">
    <annotation name="androidx.annotation.ArrayRes"/>
  </item>
</root>

