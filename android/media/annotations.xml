<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.media.AudioAttributes int getAllowedCapturePolicy()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.ALLOW_CAPTURE_BY_ALL, android.media.AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM, android.media.AudioAttributes.ALLOW_CAPTURE_BY_NONE}" />
    </annotation>
  </item>
  <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setAllowedCapturePolicy(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.ALLOW_CAPTURE_BY_ALL, android.media.AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM, android.media.AudioAttributes.ALLOW_CAPTURE_BY_NONE}" />
    </annotation>
  </item>
  <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setContentType(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.CONTENT_TYPE_UNKNOWN, android.media.AudioAttributes.CONTENT_TYPE_SPEECH, android.media.AudioAttributes.CONTENT_TYPE_MUSIC, android.media.AudioAttributes.CONTENT_TYPE_MOVIE, android.media.AudioAttributes.CONTENT_TYPE_SONIFICATION}" />
    </annotation>
  </item>
  <item name="android.media.AudioAttributes.Builder android.media.AudioAttributes.Builder setUsage(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}" />
    </annotation>
  </item>
  <item name="android.media.AudioDeviceInfo int[] getEncapsulationMetadataTypes()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER, android.media.AudioTrack.ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR}" />
    </annotation>
  </item>
  <item name="android.media.AudioDeviceInfo int[] getEncapsulationModes()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.ENCAPSULATION_MODE_NONE, android.media.AudioTrack.ENCAPSULATION_MODE_ELEMENTARY_STREAM}" />
    </annotation>
  </item>
  <item name="android.media.AudioFormat int getFrameSizeInBytes()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.AudioFormat.Builder android.media.AudioFormat.Builder setEncoding(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="false" />
      <val name="value" val="{android.media.AudioFormat.ENCODING_DEFAULT, android.media.AudioFormat.ENCODING_PCM_16BIT, android.media.AudioFormat.ENCODING_PCM_8BIT, android.media.AudioFormat.ENCODING_PCM_FLOAT, android.media.AudioFormat.ENCODING_AC3, android.media.AudioFormat.ENCODING_E_AC3, android.media.AudioFormat.ENCODING_DTS, android.media.AudioFormat.ENCODING_DTS_HD, android.media.AudioFormat.ENCODING_MP3, android.media.AudioFormat.ENCODING_AAC_LC, android.media.AudioFormat.ENCODING_AAC_HE_V1, android.media.AudioFormat.ENCODING_AAC_HE_V2, android.media.AudioFormat.ENCODING_IEC61937, android.media.AudioFormat.ENCODING_DOLBY_TRUEHD, android.media.AudioFormat.ENCODING_AAC_ELD, android.media.AudioFormat.ENCODING_AAC_XHE, android.media.AudioFormat.ENCODING_AC4, android.media.AudioFormat.ENCODING_E_AC3_JOC, android.media.AudioFormat.ENCODING_DOLBY_MAT, android.media.AudioFormat.ENCODING_OPUS}" />
    </annotation>
  </item>
  <item name="android.media.AudioManager android.media.AudioDeviceInfo[] getDevices(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.AudioManager.GET_DEVICES_INPUTS, android.media.AudioManager.GET_DEVICES_OUTPUTS}" />
    </annotation>
  </item>
  <item name="android.media.AudioManager float getStreamVolumeDb(int, int, int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="false" />
      <val name="value" val="{android.media.AudioManager.STREAM_VOICE_CALL, android.media.AudioManager.STREAM_SYSTEM, android.media.AudioManager.STREAM_RING, android.media.AudioManager.STREAM_MUSIC, android.media.AudioManager.STREAM_ALARM, android.media.AudioManager.STREAM_NOTIFICATION, android.media.AudioManager.STREAM_DTMF, android.media.AudioManager.STREAM_ACCESSIBILITY}" />
    </annotation>
  </item>
  <item name="android.media.AudioManager float getStreamVolumeDb(int, int, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="false" />
      <val name="value" val="{android.media.AudioDeviceInfo.TYPE_BUILTIN_EARPIECE, android.media.AudioDeviceInfo.TYPE_BUILTIN_SPEAKER, android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET, android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES, android.media.AudioDeviceInfo.TYPE_BLUETOOTH_SCO, android.media.AudioDeviceInfo.TYPE_BLUETOOTH_A2DP, android.media.AudioDeviceInfo.TYPE_HDMI, android.media.AudioDeviceInfo.TYPE_DOCK, android.media.AudioDeviceInfo.TYPE_USB_ACCESSORY, android.media.AudioDeviceInfo.TYPE_USB_DEVICE, android.media.AudioDeviceInfo.TYPE_USB_HEADSET, android.media.AudioDeviceInfo.TYPE_TELEPHONY, android.media.AudioDeviceInfo.TYPE_LINE_ANALOG, android.media.AudioDeviceInfo.TYPE_HDMI_ARC, android.media.AudioDeviceInfo.TYPE_LINE_DIGITAL, android.media.AudioDeviceInfo.TYPE_FM, android.media.AudioDeviceInfo.TYPE_AUX_LINE, android.media.AudioDeviceInfo.TYPE_IP, android.media.AudioDeviceInfo.TYPE_BUS, android.media.AudioDeviceInfo.TYPE_HEARING_AID, android.media.AudioDeviceInfo.TYPE_BLE_HEADSET, android.media.AudioDeviceInfo.TYPE_BLE_SPEAKER}" />
    </annotation>
  </item>
  <item name="android.media.AudioManager int getAllowedCapturePolicy()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.ALLOW_CAPTURE_BY_ALL, android.media.AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM, android.media.AudioAttributes.ALLOW_CAPTURE_BY_NONE}" />
    </annotation>
  </item>
  <item name="android.media.AudioManager int getMode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="false" />
      <val name="value" val="{android.media.AudioManager.MODE_NORMAL, android.media.AudioManager.MODE_RINGTONE, android.media.AudioManager.MODE_IN_CALL, android.media.AudioManager.MODE_IN_COMMUNICATION, android.media.AudioManager.MODE_CALL_SCREENING}" />
    </annotation>
  </item>
  <item name="android.media.AudioManager void setAllowedCapturePolicy(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.ALLOW_CAPTURE_BY_ALL, android.media.AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM, android.media.AudioAttributes.ALLOW_CAPTURE_BY_NONE}" />
    </annotation>
  </item>
  <item name="android.media.AudioManager void setMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="false" />
      <val name="value" val="{android.media.AudioManager.MODE_NORMAL, android.media.AudioManager.MODE_RINGTONE, android.media.AudioManager.MODE_IN_CALL, android.media.AudioManager.MODE_IN_COMMUNICATION, android.media.AudioManager.MODE_CALL_SCREENING}" />
    </annotation>
  </item>
  <item name="android.media.AudioMetadataReadMap int size()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioPlaybackCaptureConfiguration int[] getExcludeUsages()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}" />
    </annotation>
  </item>
  <item name="android.media.AudioPlaybackCaptureConfiguration int[] getMatchingUsages()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}" />
    </annotation>
  </item>
  <item name="android.media.AudioPlaybackCaptureConfiguration.Builder android.media.AudioPlaybackCaptureConfiguration.Builder addMatchingUsage(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}" />
    </annotation>
  </item>
  <item name="android.media.AudioPlaybackCaptureConfiguration.Builder android.media.AudioPlaybackCaptureConfiguration.Builder excludeUsage(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioAttributes.USAGE_UNKNOWN, android.media.AudioAttributes.USAGE_MEDIA, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION, android.media.AudioAttributes.USAGE_VOICE_COMMUNICATION_SIGNALLING, android.media.AudioAttributes.USAGE_ALARM, android.media.AudioAttributes.USAGE_NOTIFICATION, android.media.AudioAttributes.USAGE_NOTIFICATION_RINGTONE, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, android.media.AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, android.media.AudioAttributes.USAGE_NOTIFICATION_EVENT, android.media.AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY, android.media.AudioAttributes.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, android.media.AudioAttributes.USAGE_ASSISTANCE_SONIFICATION, android.media.AudioAttributes.USAGE_GAME, android.media.AudioAttributes.USAGE_ASSISTANT}" />
    </annotation>
  </item>
  <item name="android.media.AudioPresentation int getMasteringIndication()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioPresentation.MASTERING_NOT_INDICATED, android.media.AudioPresentation.MASTERED_FOR_STEREO, android.media.AudioPresentation.MASTERED_FOR_SURROUND, android.media.AudioPresentation.MASTERED_FOR_3D, android.media.AudioPresentation.MASTERED_FOR_HEADPHONE}" />
    </annotation>
  </item>
  <item name="android.media.AudioPresentation.Builder android.media.AudioPresentation.Builder setMasteringIndication(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioPresentation.MASTERING_NOT_INDICATED, android.media.AudioPresentation.MASTERED_FOR_STEREO, android.media.AudioPresentation.MASTERED_FOR_SURROUND, android.media.AudioPresentation.MASTERED_FOR_3D, android.media.AudioPresentation.MASTERED_FOR_HEADPHONE}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord boolean setPreferredMicrophoneDirection(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MicrophoneDirection.MIC_DIRECTION_UNSPECIFIED, android.media.MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER, android.media.MicrophoneDirection.MIC_DIRECTION_AWAY_FROM_USER, android.media.MicrophoneDirection.MIC_DIRECTION_EXTERNAL}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord boolean setPreferredMicrophoneFieldDimension(float) 0">
    <annotation name="androidx.annotation.FloatRange">
      <val name="from" val="-1.0" />
      <val name="to" val="1.0" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int getTimestamp(android.media.AudioTimestamp, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTimestamp.TIMEBASE_MONOTONIC, android.media.AudioTimestamp.TIMEBASE_BOOTTIME}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(byte[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(float[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(java.nio.ByteBuffer, int, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord int read(short[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioRecord.READ_BLOCKING, android.media.AudioRecord.READ_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecord.Builder android.media.AudioRecord.Builder setAudioSource(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRecorder.AudioSource.DEFAULT, android.media.MediaRecorder.AudioSource.MIC, android.media.MediaRecorder.AudioSource.VOICE_UPLINK, android.media.MediaRecorder.AudioSource.VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource.VOICE_CALL, android.media.MediaRecorder.AudioSource.CAMCORDER, android.media.MediaRecorder.AudioSource.VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource.VOICE_COMMUNICATION, android.media.MediaRecorder.AudioSource.UNPROCESSED, android.media.MediaRecorder.AudioSource.VOICE_PERFORMANCE}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecordingConfiguration int getAudioSource()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRecorder.AudioSource.DEFAULT, android.media.MediaRecorder.AudioSource.MIC, android.media.MediaRecorder.AudioSource.VOICE_UPLINK, android.media.MediaRecorder.AudioSource.VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource.VOICE_CALL, android.media.MediaRecorder.AudioSource.CAMCORDER, android.media.MediaRecorder.AudioSource.VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource.VOICE_COMMUNICATION, android.media.MediaRecorder.AudioSource.UNPROCESSED, android.media.MediaRecorder.AudioSource.VOICE_PERFORMANCE}" />
    </annotation>
  </item>
  <item name="android.media.AudioRecordingConfiguration int getClientAudioSource()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRecorder.AudioSource.DEFAULT, android.media.MediaRecorder.AudioSource.MIC, android.media.MediaRecorder.AudioSource.VOICE_UPLINK, android.media.MediaRecorder.AudioSource.VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource.VOICE_CALL, android.media.MediaRecorder.AudioSource.CAMCORDER, android.media.MediaRecorder.AudioSource.VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource.VOICE_COMMUNICATION, android.media.MediaRecorder.AudioSource.UNPROCESSED, android.media.MediaRecorder.AudioSource.VOICE_PERFORMANCE}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack boolean setAudioDescriptionMixLeveldB(float) 0">
    <annotation name="androidx.annotation.FloatRange">
      <val name="to" val="48.0" />
      <val name="toInclusive" val="true" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack boolean setDualMonoMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.DUAL_MONO_MODE_OFF, android.media.AudioTrack.DUAL_MONO_MODE_LR, android.media.AudioTrack.DUAL_MONO_MODE_LL, android.media.AudioTrack.DUAL_MONO_MODE_RR}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int getBufferCapacityInFrames()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int getBufferSizeInFrames()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int getDualMonoMode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.DUAL_MONO_MODE_OFF, android.media.AudioTrack.DUAL_MONO_MODE_LR, android.media.AudioTrack.DUAL_MONO_MODE_LL, android.media.AudioTrack.DUAL_MONO_MODE_RR}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int getOffloadDelay()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int getOffloadPadding()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int getPerformanceMode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.PERFORMANCE_MODE_NONE, android.media.AudioTrack.PERFORMANCE_MODE_LOW_LATENCY, android.media.AudioTrack.PERFORMANCE_MODE_POWER_SAVING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int getStartThresholdInFrames()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setAuxEffectSendLevel(float) 0">
    <annotation name="androidx.annotation.FloatRange">
      <val name="from" val="0.0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setBufferSizeInFrames(int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setLoopPoints(int, int, int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setLoopPoints(int, int, int) 1">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setLoopPoints(int, int, int) 2">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="-1" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setPlaybackHeadPosition(int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setStartThresholdInFrames(int)">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int setStartThresholdInFrames(int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(byte[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(float[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(java.nio.ByteBuffer, int, int, long) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack int write(short[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.WRITE_BLOCKING, android.media.AudioTrack.WRITE_NON_BLOCKING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack void setOffloadDelayPadding(int, int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack void setOffloadDelayPadding(int, int) 1">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setBufferSizeInBytes(int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setEncapsulationMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.ENCAPSULATION_MODE_NONE, android.media.AudioTrack.ENCAPSULATION_MODE_ELEMENTARY_STREAM}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setPerformanceMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.PERFORMANCE_MODE_NONE, android.media.AudioTrack.PERFORMANCE_MODE_LOW_LATENCY, android.media.AudioTrack.PERFORMANCE_MODE_POWER_SAVING}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setSessionId(int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack.Builder android.media.AudioTrack.Builder setTransferMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.AudioTrack.MODE_STATIC, android.media.AudioTrack.MODE_STREAM}" />
    </annotation>
  </item>
  <item name="android.media.AudioTrack.StreamEventCallback void onDataRequest(android.media.AudioTrack, int) 1">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.media.ExifInterface ExifInterface(java.io.InputStream, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.ExifInterface.STREAM_TYPE_FULL_IMAGE_DATA, android.media.ExifInterface.STREAM_TYPE_EXIF_DATA_ONLY}" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int) 1">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC}" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int) 3">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int, long) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int, long) 1">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int, long) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC}" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int, long) 3">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageReader android.media.ImageReader newInstance(int, int, int, int, long) 4">
    <annotation name="androidx.annotation.LongDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.hardware.HardwareBuffer.USAGE_CPU_READ_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_READ_OFTEN, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_RARELY, android.hardware.HardwareBuffer.USAGE_CPU_WRITE_OFTEN, android.hardware.HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, android.hardware.HardwareBuffer.USAGE_GPU_COLOR_OUTPUT, android.hardware.HardwareBuffer.USAGE_PROTECTED_CONTENT, android.hardware.HardwareBuffer.USAGE_VIDEO_ENCODE, android.hardware.HardwareBuffer.USAGE_GPU_DATA_BUFFER, android.hardware.HardwareBuffer.USAGE_SENSOR_DIRECT_DATA, android.hardware.HardwareBuffer.USAGE_GPU_CUBE_MAP, android.hardware.HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE}" />
    </annotation>
  </item>
  <item name="android.media.ImageWriter android.media.ImageWriter newInstance(android.view.Surface, int) 1">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageWriter android.media.ImageWriter newInstance(android.view.Surface, int, int) 1">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.ImageWriter android.media.ImageWriter newInstance(android.view.Surface, int, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.graphics.ImageFormat.UNKNOWN, android.graphics.ImageFormat.RGB_565, android.graphics.ImageFormat.YV12, android.graphics.ImageFormat.Y8, android.graphics.ImageFormat.NV16, android.graphics.ImageFormat.NV21, android.graphics.ImageFormat.YUY2, android.graphics.ImageFormat.JPEG, android.graphics.ImageFormat.DEPTH_JPEG, android.graphics.ImageFormat.YUV_420_888, android.graphics.ImageFormat.YUV_422_888, android.graphics.ImageFormat.YUV_444_888, android.graphics.ImageFormat.FLEX_RGB_888, android.graphics.ImageFormat.FLEX_RGBA_8888, android.graphics.ImageFormat.RAW_SENSOR, android.graphics.ImageFormat.RAW_PRIVATE, android.graphics.ImageFormat.RAW10, android.graphics.ImageFormat.RAW12, android.graphics.ImageFormat.DEPTH16, android.graphics.ImageFormat.DEPTH_POINT_CLOUD, android.graphics.ImageFormat.PRIVATE, android.graphics.ImageFormat.HEIC}" />
    </annotation>
  </item>
  <item name="android.media.MediaCas MediaCas(android.content.Context, int, java.lang.String, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_SCAN, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_LIVE, android.media.tv.TvInputService.PRIORITY_HINT_USE_CASE_TYPE_RECORD}" />
    </annotation>
  </item>
  <item name="android.media.MediaCas android.media.MediaCas.Session openSession(int, int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaCas.SESSION_USAGE_LIVE, android.media.MediaCas.SESSION_USAGE_PLAYBACK, android.media.MediaCas.SESSION_USAGE_RECORD, android.media.MediaCas.SESSION_USAGE_TIMESHIFT}" />
    </annotation>
  </item>
  <item name="android.media.MediaCas android.media.MediaCas.Session openSession(int, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaCas.SCRAMBLING_MODE_RESERVED, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA1, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA2, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA3_STANDARD, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA3_MINIMAL, android.media.MediaCas.SCRAMBLING_MODE_DVB_CSA3_ENHANCE, android.media.MediaCas.SCRAMBLING_MODE_DVB_CISSA_V1, android.media.MediaCas.SCRAMBLING_MODE_DVB_IDSA, android.media.MediaCas.SCRAMBLING_MODE_MULTI2, android.media.MediaCas.SCRAMBLING_MODE_AES128, android.media.MediaCas.SCRAMBLING_MODE_AES_ECB, android.media.MediaCas.SCRAMBLING_MODE_AES_SCTE52, android.media.MediaCas.SCRAMBLING_MODE_TDES_ECB, android.media.MediaCas.SCRAMBLING_MODE_TDES_SCTE52}" />
    </annotation>
  </item>
  <item name="android.media.MediaCas.EventListener void onPluginStatusUpdate(android.media.MediaCas, int, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaCas.PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED, android.media.MediaCas.PLUGIN_STATUS_SESSION_NUMBER_CHANGED}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec int dequeueOutputBuffer(android.media.MediaCodec.BufferInfo, long)">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.INFO_TRY_AGAIN_LATER, android.media.MediaCodec.INFO_OUTPUT_FORMAT_CHANGED, android.media.MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaCodec.CONFIGURE_FLAG_ENCODE, android.media.MediaCodec.CONFIGURE_FLAG_USE_BLOCK_MODEL}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec void configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaCodec.CONFIGURE_FLAG_ENCODE, android.media.MediaCodec.CONFIGURE_FLAG_USE_BLOCK_MODEL}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec void setVideoScalingMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT, android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.BufferInfo flags">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.BufferInfo void set(int, int, long, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.CryptoException int getErrorCode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaCodec.CryptoException.ERROR_NO_KEY, android.media.MediaCodec.CryptoException.ERROR_KEY_EXPIRED, android.media.MediaCodec.CryptoException.ERROR_RESOURCE_BUSY, android.media.MediaCodec.CryptoException.ERROR_INSUFFICIENT_OUTPUT_PROTECTION, android.media.MediaCodec.CryptoException.ERROR_SESSION_NOT_OPENED, android.media.MediaCodec.CryptoException.ERROR_UNSUPPORTED_OPERATION, android.media.MediaCodec.CryptoException.ERROR_INSUFFICIENT_SECURITY, android.media.MediaCodec.CryptoException.ERROR_FRAME_TOO_LARGE, android.media.MediaCodec.CryptoException.ERROR_LOST_STATE}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.OutputFrame int getFlags()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.ParameterDescriptor int getType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaFormat.TYPE_NULL, android.media.MediaFormat.TYPE_INTEGER, android.media.MediaFormat.TYPE_LONG, android.media.MediaFormat.TYPE_FLOAT, android.media.MediaFormat.TYPE_STRING, android.media.MediaFormat.TYPE_BYTE_BUFFER}" />
    </annotation>
  </item>
  <item name="android.media.MediaCodec.QueueRequest android.media.MediaCodec.QueueRequest setFlags(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME, android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME, android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG, android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM, android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap<java.lang.String,java.lang.String>) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KEY_TYPE_STREAMING, android.media.MediaDrm.KEY_TYPE_OFFLINE, android.media.MediaDrm.KEY_TYPE_RELEASE}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm byte[] openSession(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getConnectedHdcpLevel()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.HDCP_LEVEL_UNKNOWN, android.media.MediaDrm.HDCP_NONE, android.media.MediaDrm.HDCP_V1, android.media.MediaDrm.HDCP_V2, android.media.MediaDrm.HDCP_V2_1, android.media.MediaDrm.HDCP_V2_2, android.media.MediaDrm.HDCP_V2_3, android.media.MediaDrm.HDCP_NO_DIGITAL_OUTPUT}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getMaxHdcpLevel()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.HDCP_LEVEL_UNKNOWN, android.media.MediaDrm.HDCP_NONE, android.media.MediaDrm.HDCP_V1, android.media.MediaDrm.HDCP_V2, android.media.MediaDrm.HDCP_V2_1, android.media.MediaDrm.HDCP_V2_2, android.media.MediaDrm.HDCP_V2_3, android.media.MediaDrm.HDCP_NO_DIGITAL_OUTPUT}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getOfflineLicenseState(byte[])">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.OFFLINE_LICENSE_STATE_UNKNOWN, android.media.MediaDrm.OFFLINE_LICENSE_STATE_USABLE, android.media.MediaDrm.OFFLINE_LICENSE_STATE_RELEASED}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm int getSecurityLevel(byte[])">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SECURITY_LEVEL_UNKNOWN, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_SW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_CRYPTO, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_DECODE, android.media.MediaDrm.SECURITY_LEVEL_HW_SECURE_ALL}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.KeyRequest int getRequestType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KeyRequest.REQUEST_TYPE_INITIAL, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_RENEWAL, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_RELEASE, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_NONE, android.media.MediaDrm.KeyRequest.REQUEST_TYPE_UPDATE}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.KeyStatus int getStatusCode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KeyStatus.STATUS_USABLE, android.media.MediaDrm.KeyStatus.STATUS_EXPIRED, android.media.MediaDrm.KeyStatus.STATUS_OUTPUT_NOT_ALLOWED, android.media.MediaDrm.KeyStatus.STATUS_PENDING, android.media.MediaDrm.KeyStatus.STATUS_INTERNAL_ERROR, android.media.MediaDrm.KeyStatus.STATUS_USABLE_IN_FUTURE}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.OnEventListener void onEvent(android.media.MediaDrm, byte[], int, int, byte[]) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.EVENT_PROVISION_REQUIRED, android.media.MediaDrm.EVENT_KEY_REQUIRED, android.media.MediaDrm.EVENT_KEY_EXPIRED, android.media.MediaDrm.EVENT_VENDOR_DEFINED, android.media.MediaDrm.EVENT_SESSION_RECLAIMED}" />
    </annotation>
  </item>
  <item name="android.media.MediaDrm.SessionException int getErrorCode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.SessionException.ERROR_RESOURCE_CONTENTION}" />
    </annotation>
  </item>
  <item name="android.media.MediaExtractor int getSampleFlags()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaExtractor.SAMPLE_FLAG_SYNC, android.media.MediaExtractor.SAMPLE_FLAG_ENCRYPTED, android.media.MediaExtractor.SAMPLE_FLAG_PARTIAL_FRAME}" />
    </annotation>
  </item>
  <item name="android.media.MediaExtractor void seekTo(long, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaExtractor.SEEK_TO_PREVIOUS_SYNC, android.media.MediaExtractor.SEEK_TO_NEXT_SYNC, android.media.MediaExtractor.SEEK_TO_CLOSEST_SYNC}" />
    </annotation>
  </item>
  <item name="android.media.MediaFormat int getValueTypeForKey(java.lang.String)">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaFormat.TYPE_NULL, android.media.MediaFormat.TYPE_INTEGER, android.media.MediaFormat.TYPE_LONG, android.media.MediaFormat.TYPE_FLOAT, android.media.MediaFormat.TYPE_STRING, android.media.MediaFormat.TYPE_BYTE_BUFFER}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata android.graphics.Bitmap getBitmap(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_ART, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata android.media.Rating getRating(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_USER_RATING, android.media.MediaMetadata.METADATA_KEY_RATING}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata java.lang.CharSequence getText(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata java.lang.String getString(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata long getLong(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_DURATION, android.media.MediaMetadata.METADATA_KEY_YEAR, android.media.MediaMetadata.METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata.METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata.METADATA_KEY_DISC_NUMBER, android.media.MediaMetadata.METADATA_KEY_BT_FOLDER_TYPE}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putBitmap(java.lang.String, android.graphics.Bitmap) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_ART, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putLong(java.lang.String, long) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_DURATION, android.media.MediaMetadata.METADATA_KEY_YEAR, android.media.MediaMetadata.METADATA_KEY_TRACK_NUMBER, android.media.MediaMetadata.METADATA_KEY_NUM_TRACKS, android.media.MediaMetadata.METADATA_KEY_DISC_NUMBER, android.media.MediaMetadata.METADATA_KEY_BT_FOLDER_TYPE}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putRating(java.lang.String, android.media.Rating) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_USER_RATING, android.media.MediaMetadata.METADATA_KEY_RATING}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putString(java.lang.String, java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadata.Builder android.media.MediaMetadata.Builder putText(java.lang.String, java.lang.CharSequence) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaMetadata.METADATA_KEY_TITLE, android.media.MediaMetadata.METADATA_KEY_ARTIST, android.media.MediaMetadata.METADATA_KEY_ALBUM, android.media.MediaMetadata.METADATA_KEY_AUTHOR, android.media.MediaMetadata.METADATA_KEY_WRITER, android.media.MediaMetadata.METADATA_KEY_COMPOSER, android.media.MediaMetadata.METADATA_KEY_COMPILATION, android.media.MediaMetadata.METADATA_KEY_DATE, android.media.MediaMetadata.METADATA_KEY_GENRE, android.media.MediaMetadata.METADATA_KEY_ALBUM_ARTIST, android.media.MediaMetadata.METADATA_KEY_ART_URI, android.media.MediaMetadata.METADATA_KEY_ALBUM_ART_URI, android.media.MediaMetadata.METADATA_KEY_DISPLAY_TITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_SUBTITLE, android.media.MediaMetadata.METADATA_KEY_DISPLAY_DESCRIPTION, android.media.MediaMetadata.METADATA_KEY_DISPLAY_ICON_URI, android.media.MediaMetadata.METADATA_KEY_MEDIA_ID, android.media.MediaMetadata.METADATA_KEY_MEDIA_URI}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getFrameAtTime(long, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getFrameAtTime(long, int, android.media.MediaMetadataRetriever.BitmapParams) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int) 2">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int) 3">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int, android.media.MediaMetadataRetriever.BitmapParams) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaMetadataRetriever.OPTION_PREVIOUS_SYNC, android.media.MediaMetadataRetriever.OPTION_NEXT_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST_SYNC, android.media.MediaMetadataRetriever.OPTION_CLOSEST}" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int, android.media.MediaMetadataRetriever.BitmapParams) 2">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.MediaMetadataRetriever android.graphics.Bitmap getScaledFrameAtTime(long, int, int, int, android.media.MediaMetadataRetriever.BitmapParams) 3">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.media.MediaMuxer MediaMuxer(java.io.FileDescriptor, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_WEBM, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_3GPP, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_HEIF, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_OGG}" />
    </annotation>
  </item>
  <item name="android.media.MediaMuxer MediaMuxer(java.lang.String, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_WEBM, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_3GPP, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_HEIF, android.media.MediaMuxer.OutputFormat.MUXER_OUTPUT_OGG}" />
    </annotation>
  </item>
  <item name="android.media.MediaParser android.media.MediaParser create(android.media.MediaParser.OutputConsumer, java.lang.String...) 1">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaParser.PARSER_NAME_UNKNOWN, android.media.MediaParser.PARSER_NAME_MATROSKA, android.media.MediaParser.PARSER_NAME_FMP4, android.media.MediaParser.PARSER_NAME_MP4, android.media.MediaParser.PARSER_NAME_MP3, android.media.MediaParser.PARSER_NAME_ADTS, android.media.MediaParser.PARSER_NAME_AC3, android.media.MediaParser.PARSER_NAME_TS, android.media.MediaParser.PARSER_NAME_FLV, android.media.MediaParser.PARSER_NAME_OGG, android.media.MediaParser.PARSER_NAME_PS, android.media.MediaParser.PARSER_NAME_WAV, android.media.MediaParser.PARSER_NAME_AMR, android.media.MediaParser.PARSER_NAME_AC4, android.media.MediaParser.PARSER_NAME_FLAC}" />
    </annotation>
  </item>
  <item name="android.media.MediaParser android.media.MediaParser createByName(java.lang.String, android.media.MediaParser.OutputConsumer) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaParser.PARSER_NAME_UNKNOWN, android.media.MediaParser.PARSER_NAME_MATROSKA, android.media.MediaParser.PARSER_NAME_FMP4, android.media.MediaParser.PARSER_NAME_MP4, android.media.MediaParser.PARSER_NAME_MP3, android.media.MediaParser.PARSER_NAME_ADTS, android.media.MediaParser.PARSER_NAME_AC3, android.media.MediaParser.PARSER_NAME_TS, android.media.MediaParser.PARSER_NAME_FLV, android.media.MediaParser.PARSER_NAME_OGG, android.media.MediaParser.PARSER_NAME_PS, android.media.MediaParser.PARSER_NAME_WAV, android.media.MediaParser.PARSER_NAME_AMR, android.media.MediaParser.PARSER_NAME_AC4, android.media.MediaParser.PARSER_NAME_FLAC}" />
    </annotation>
  </item>
  <item name="android.media.MediaParser android.media.MediaParser setParameter(java.lang.String, java.lang.Object) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaParser.PARAMETER_ADTS_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_AMR_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_FLAC_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP4_IGNORE_EDIT_LISTS, android.media.MediaParser.PARAMETER_MP4_IGNORE_TFDT_BOX, android.media.MediaParser.PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES, android.media.MediaParser.PARAMETER_MATROSKA_DISABLE_CUES_SEEKING, android.media.MediaParser.PARAMETER_MP3_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP3_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_MP3_ENABLE_INDEX_SEEKING, android.media.MediaParser.PARAMETER_TS_MODE, android.media.MediaParser.PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES, android.media.MediaParser.PARAMETER_TS_IGNORE_AAC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_AVC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM, android.media.MediaParser.PARAMETER_TS_DETECT_ACCESS_UNITS, android.media.MediaParser.PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaParser boolean supportsParameter(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaParser.PARAMETER_ADTS_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_AMR_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_FLAC_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP4_IGNORE_EDIT_LISTS, android.media.MediaParser.PARAMETER_MP4_IGNORE_TFDT_BOX, android.media.MediaParser.PARAMETER_MP4_TREAT_VIDEO_FRAMES_AS_KEYFRAMES, android.media.MediaParser.PARAMETER_MATROSKA_DISABLE_CUES_SEEKING, android.media.MediaParser.PARAMETER_MP3_DISABLE_ID3, android.media.MediaParser.PARAMETER_MP3_ENABLE_CBR_SEEKING, android.media.MediaParser.PARAMETER_MP3_ENABLE_INDEX_SEEKING, android.media.MediaParser.PARAMETER_TS_MODE, android.media.MediaParser.PARAMETER_TS_ALLOW_NON_IDR_AVC_KEYFRAMES, android.media.MediaParser.PARAMETER_TS_IGNORE_AAC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_AVC_STREAM, android.media.MediaParser.PARAMETER_TS_IGNORE_SPLICE_INFO_STREAM, android.media.MediaParser.PARAMETER_TS_DETECT_ACCESS_UNITS, android.media.MediaParser.PARAMETER_TS_ENABLE_HDMV_DTS_AUDIO_STREAMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaParser java.lang.String getParserName()">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaParser.PARSER_NAME_UNKNOWN, android.media.MediaParser.PARSER_NAME_MATROSKA, android.media.MediaParser.PARSER_NAME_FMP4, android.media.MediaParser.PARSER_NAME_MP4, android.media.MediaParser.PARSER_NAME_MP3, android.media.MediaParser.PARSER_NAME_ADTS, android.media.MediaParser.PARSER_NAME_AC3, android.media.MediaParser.PARSER_NAME_TS, android.media.MediaParser.PARSER_NAME_FLV, android.media.MediaParser.PARSER_NAME_OGG, android.media.MediaParser.PARSER_NAME_PS, android.media.MediaParser.PARSER_NAME_WAV, android.media.MediaParser.PARSER_NAME_AMR, android.media.MediaParser.PARSER_NAME_AC4, android.media.MediaParser.PARSER_NAME_FLAC}" />
    </annotation>
  </item>
  <item name="android.media.MediaParser java.util.List&lt;java.lang.String&gt; getParserNames(android.media.MediaFormat)">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaParser.PARSER_NAME_UNKNOWN, android.media.MediaParser.PARSER_NAME_MATROSKA, android.media.MediaParser.PARSER_NAME_FMP4, android.media.MediaParser.PARSER_NAME_MP4, android.media.MediaParser.PARSER_NAME_MP3, android.media.MediaParser.PARSER_NAME_ADTS, android.media.MediaParser.PARSER_NAME_AC3, android.media.MediaParser.PARSER_NAME_TS, android.media.MediaParser.PARSER_NAME_FLV, android.media.MediaParser.PARSER_NAME_OGG, android.media.MediaParser.PARSER_NAME_PS, android.media.MediaParser.PARSER_NAME_WAV, android.media.MediaParser.PARSER_NAME_AMR, android.media.MediaParser.PARSER_NAME_AC4, android.media.MediaParser.PARSER_NAME_FLAC}" />
    </annotation>
  </item>
  <item name="android.media.MediaParser.OutputConsumer void onSampleCompleted(int, long, int, int, int, android.media.MediaCodec.CryptoInfo) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MediaParser.SAMPLE_FLAG_KEY_FRAME, android.media.MediaParser.SAMPLE_FLAG_HAS_SUPPLEMENTAL_DATA, android.media.MediaParser.SAMPLE_FLAG_LAST_SAMPLE, android.media.MediaParser.SAMPLE_FLAG_ENCRYPTED, android.media.MediaParser.SAMPLE_FLAG_DECODE_ONLY}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer android.media.MediaDrm.KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map<java.lang.String,java.lang.String>) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaDrm.KEY_TYPE_STREAMING, android.media.MediaDrm.KEY_TYPE_OFFLINE, android.media.MediaDrm.KEY_TYPE_RELEASE}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer java.lang.String getDrmPropertyString(java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer void seekTo(long, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaPlayer.SEEK_PREVIOUS_SYNC, android.media.MediaPlayer.SEEK_NEXT_SYNC, android.media.MediaPlayer.SEEK_CLOSEST_SYNC, android.media.MediaPlayer.SEEK_CLOSEST}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer void setDrmPropertyString(java.lang.String, java.lang.String) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.media.MediaDrm.PROPERTY_VENDOR, android.media.MediaDrm.PROPERTY_VERSION, android.media.MediaDrm.PROPERTY_DESCRIPTION, android.media.MediaDrm.PROPERTY_ALGORITHMS}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer.OnDrmPreparedListener void onDrmPrepared(android.media.MediaPlayer, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaPlayer.PREPARE_DRM_STATUS_SUCCESS, android.media.MediaPlayer.PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR, android.media.MediaPlayer.PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR, android.media.MediaPlayer.PREPARE_DRM_STATUS_PREPARATION_ERROR}" />
    </annotation>
  </item>
  <item name="android.media.MediaPlayer.TrackInfo int getTrackType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="false" />
      <val name="value" val="{android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_UNKNOWN, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_VIDEO, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_AUDIO, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_TIMEDTEXT, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_SUBTITLE, android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_METADATA}" />
    </annotation>
  </item>
  <item name="android.media.MediaRecorder boolean setPreferredMicrophoneDirection(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MicrophoneDirection.MIC_DIRECTION_UNSPECIFIED, android.media.MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER, android.media.MicrophoneDirection.MIC_DIRECTION_AWAY_FROM_USER, android.media.MicrophoneDirection.MIC_DIRECTION_EXTERNAL}" />
    </annotation>
  </item>
  <item name="android.media.MediaRecorder boolean setPreferredMicrophoneFieldDimension(float) 0">
    <annotation name="androidx.annotation.FloatRange">
      <val name="from" val="-1.0" />
      <val name="to" val="1.0" />
    </annotation>
  </item>
  <item name="android.media.MediaRecorder void setAudioSource(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRecorder.AudioSource.DEFAULT, android.media.MediaRecorder.AudioSource.MIC, android.media.MediaRecorder.AudioSource.VOICE_UPLINK, android.media.MediaRecorder.AudioSource.VOICE_DOWNLINK, android.media.MediaRecorder.AudioSource.VOICE_CALL, android.media.MediaRecorder.AudioSource.CAMCORDER, android.media.MediaRecorder.AudioSource.VOICE_RECOGNITION, android.media.MediaRecorder.AudioSource.VOICE_COMMUNICATION, android.media.MediaRecorder.AudioSource.UNPROCESSED, android.media.MediaRecorder.AudioSource.VOICE_PERFORMANCE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRecorder.AudioSource REMOTE_SUBMIX">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.CAPTURE_AUDIO_OUTPUT&quot;" />
    </annotation>
  </item>
  <item name="android.media.MediaRoute2Info int getConnectionState()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2Info.CONNECTION_STATE_DISCONNECTED, android.media.MediaRoute2Info.CONNECTION_STATE_CONNECTING, android.media.MediaRoute2Info.CONNECTION_STATE_CONNECTED}" />
    </annotation>
  </item>
  <item name="android.media.MediaRoute2Info int getVolumeHandling()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2Info.PLAYBACK_VOLUME_FIXED, android.media.MediaRoute2Info.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRoute2Info.Builder android.media.MediaRoute2Info.Builder setConnectionState(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2Info.CONNECTION_STATE_DISCONNECTED, android.media.MediaRoute2Info.CONNECTION_STATE_CONNECTING, android.media.MediaRoute2Info.CONNECTION_STATE_CONNECTED}" />
    </annotation>
  </item>
  <item name="android.media.MediaRoute2Info.Builder android.media.MediaRoute2Info.Builder setVolumeHandling(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2Info.PLAYBACK_VOLUME_FIXED, android.media.MediaRoute2Info.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRoute2ProviderService android.os.IBinder onBind(android.content.Intent)">
    <annotation name="androidx.annotation.CallSuper"/>
  </item>
  <item name="android.media.MediaRoute2ProviderService void notifyRequestFailed(long, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2ProviderService.REASON_UNKNOWN_ERROR, android.media.MediaRoute2ProviderService.REASON_REJECTED, android.media.MediaRoute2ProviderService.REASON_NETWORK_ERROR, android.media.MediaRoute2ProviderService.REASON_ROUTE_NOT_AVAILABLE, android.media.MediaRoute2ProviderService.REASON_INVALID_COMMAND}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.RouteGroup void setIconResource(int) 0">
    <annotation name="androidx.annotation.DrawableRes"/>
  </item>
  <item name="android.media.MediaRouter.RouteInfo int getDeviceType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.DEVICE_TYPE_UNKNOWN, android.media.MediaRouter.RouteInfo.DEVICE_TYPE_TV, android.media.MediaRouter.RouteInfo.DEVICE_TYPE_SPEAKER, android.media.MediaRouter.RouteInfo.DEVICE_TYPE_BLUETOOTH}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.RouteInfo int getPlaybackType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_LOCAL, android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.RouteInfo int getVolumeHandling()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_FIXED, android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.UserRouteInfo void setIconResource(int) 0">
    <annotation name="androidx.annotation.DrawableRes"/>
  </item>
  <item name="android.media.MediaRouter.UserRouteInfo void setPlaybackType(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_LOCAL, android.media.MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter.UserRouteInfo void setVolumeHandling(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_FIXED, android.media.MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.MediaRouter2.RoutingController int getVolumeHandling()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2Info.PLAYBACK_VOLUME_FIXED, android.media.MediaRoute2Info.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.MediaSession2Service android.os.IBinder onBind(android.content.Intent)">
    <annotation name="androidx.annotation.CallSuper"/>
  </item>
  <item name="android.media.MediaSession2Service void onCreate()">
    <annotation name="androidx.annotation.CallSuper"/>
  </item>
  <item name="android.media.MediaSession2Service void onDestroy()">
    <annotation name="androidx.annotation.CallSuper"/>
  </item>
  <item name="android.media.MediaTimestamp MediaTimestamp(long, long, float) 2">
    <annotation name="androidx.annotation.FloatRange">
      <val name="from" val="0.0" />
      <val name="to" val="3.4028235E38" />
    </annotation>
  </item>
  <item name="android.media.MediaTimestamp float getMediaClockRate()">
    <annotation name="androidx.annotation.FloatRange">
      <val name="from" val="0.0" />
      <val name="to" val="3.4028235E38" />
    </annotation>
  </item>
  <item name="android.media.MicrophoneDirection boolean setPreferredMicrophoneDirection(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MicrophoneDirection.MIC_DIRECTION_UNSPECIFIED, android.media.MicrophoneDirection.MIC_DIRECTION_TOWARDS_USER, android.media.MicrophoneDirection.MIC_DIRECTION_AWAY_FROM_USER, android.media.MicrophoneDirection.MIC_DIRECTION_EXTERNAL}" />
    </annotation>
  </item>
  <item name="android.media.MicrophoneDirection boolean setPreferredMicrophoneFieldDimension(float) 0">
    <annotation name="androidx.annotation.FloatRange">
      <val name="from" val="-1.0" />
      <val name="to" val="1.0" />
    </annotation>
  </item>
  <item name="android.media.MicrophoneInfo int getDirectionality()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MicrophoneInfo.DIRECTIONALITY_UNKNOWN, android.media.MicrophoneInfo.DIRECTIONALITY_OMNI, android.media.MicrophoneInfo.DIRECTIONALITY_BI_DIRECTIONAL, android.media.MicrophoneInfo.DIRECTIONALITY_CARDIOID, android.media.MicrophoneInfo.DIRECTIONALITY_HYPER_CARDIOID, android.media.MicrophoneInfo.DIRECTIONALITY_SUPER_CARDIOID}" />
    </annotation>
  </item>
  <item name="android.media.MicrophoneInfo int getLocation()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.media.MicrophoneInfo.LOCATION_UNKNOWN, android.media.MicrophoneInfo.LOCATION_MAINBODY, android.media.MicrophoneInfo.LOCATION_MAINBODY_MOVABLE, android.media.MicrophoneInfo.LOCATION_PERIPHERAL}" />
    </annotation>
  </item>
  <item name="android.media.PlaybackParams android.media.PlaybackParams setAudioFallbackMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.PlaybackParams.AUDIO_FALLBACK_MODE_DEFAULT, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_MUTE, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_FAIL}" />
    </annotation>
  </item>
  <item name="android.media.PlaybackParams int getAudioFallbackMode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.PlaybackParams.AUDIO_FALLBACK_MODE_DEFAULT, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_MUTE, android.media.PlaybackParams.AUDIO_FALLBACK_MODE_FAIL}" />
    </annotation>
  </item>
  <item name="android.media.Rating android.media.Rating newStarRating(int, float) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS}" />
    </annotation>
  </item>
  <item name="android.media.Rating android.media.Rating newUnratedRating(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.Rating.RATING_NONE, android.media.Rating.RATING_HEART, android.media.Rating.RATING_THUMB_UP_DOWN, android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS, android.media.Rating.RATING_PERCENTAGE}" />
    </annotation>
  </item>
  <item name="android.media.Rating int getRatingStyle()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.Rating.RATING_NONE, android.media.Rating.RATING_HEART, android.media.Rating.RATING_THUMB_UP_DOWN, android.media.Rating.RATING_3_STARS, android.media.Rating.RATING_4_STARS, android.media.Rating.RATING_5_STARS, android.media.Rating.RATING_PERCENTAGE}" />
    </annotation>
  </item>
  <item name="android.media.RoutingSessionInfo int getVolumeHandling()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2Info.PLAYBACK_VOLUME_FIXED, android.media.MediaRoute2Info.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.RoutingSessionInfo.Builder android.media.RoutingSessionInfo.Builder setVolumeHandling(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.MediaRoute2Info.PLAYBACK_VOLUME_FIXED, android.media.MediaRoute2Info.PLAYBACK_VOLUME_VARIABLE}" />
    </annotation>
  </item>
  <item name="android.media.Session2Token int getType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.Session2Token.TYPE_SESSION, android.media.Session2Token.TYPE_SESSION_SERVICE}" />
    </annotation>
  </item>
  <item name="android.media.SyncParams android.media.SyncParams setAudioAdjustMode(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.AUDIO_ADJUST_MODE_DEFAULT, android.media.SyncParams.AUDIO_ADJUST_MODE_STRETCH, android.media.SyncParams.AUDIO_ADJUST_MODE_RESAMPLE}" />
    </annotation>
  </item>
  <item name="android.media.SyncParams android.media.SyncParams setSyncSource(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.SYNC_SOURCE_DEFAULT, android.media.SyncParams.SYNC_SOURCE_SYSTEM_CLOCK, android.media.SyncParams.SYNC_SOURCE_AUDIO, android.media.SyncParams.SYNC_SOURCE_VSYNC}" />
    </annotation>
  </item>
  <item name="android.media.SyncParams int getAudioAdjustMode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.AUDIO_ADJUST_MODE_DEFAULT, android.media.SyncParams.AUDIO_ADJUST_MODE_STRETCH, android.media.SyncParams.AUDIO_ADJUST_MODE_RESAMPLE}" />
    </annotation>
  </item>
  <item name="android.media.SyncParams int getSyncSource()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.SyncParams.SYNC_SOURCE_DEFAULT, android.media.SyncParams.SYNC_SOURCE_SYSTEM_CLOCK, android.media.SyncParams.SYNC_SOURCE_AUDIO, android.media.SyncParams.SYNC_SOURCE_VSYNC}" />
    </annotation>
  </item>
  <item name="android.media.VolumeProvider VolumeProvider(int, int, int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.VolumeProvider.VOLUME_CONTROL_FIXED, android.media.VolumeProvider.VOLUME_CONTROL_RELATIVE, android.media.VolumeProvider.VOLUME_CONTROL_ABSOLUTE}" />
    </annotation>
  </item>
  <item name="android.media.VolumeProvider VolumeProvider(int, int, int, java.lang.String) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.VolumeProvider.VOLUME_CONTROL_FIXED, android.media.VolumeProvider.VOLUME_CONTROL_RELATIVE, android.media.VolumeProvider.VOLUME_CONTROL_ABSOLUTE}" />
    </annotation>
  </item>
  <item name="android.media.VolumeProvider int getVolumeControl()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.VolumeProvider.VOLUME_CONTROL_FIXED, android.media.VolumeProvider.VOLUME_CONTROL_RELATIVE, android.media.VolumeProvider.VOLUME_CONTROL_ABSOLUTE}" />
    </annotation>
  </item>
  <item name="android.media.VolumeShaper.Configuration int getInterpolatorType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_STEP, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC_MONOTONIC}" />
    </annotation>
  </item>
  <item name="android.media.VolumeShaper.Configuration.Builder android.media.VolumeShaper.Configuration.Builder setInterpolatorType(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_STEP, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC, android.media.VolumeShaper.Configuration.INTERPOLATOR_TYPE_CUBIC_MONOTONIC}" />
    </annotation>
  </item>
</root>

