<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.telephony.BarringInfo android.telephony.BarringInfo.BarringServiceInfo getBarringServiceInfo(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.BarringInfo.BARRING_SERVICE_TYPE_CS_SERVICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_PS_SERVICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_CS_VOICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MO_SIGNALLING, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MO_DATA, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_CS_FALLBACK, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MMTEL_VOICE, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_MMTEL_VIDEO, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_EMERGENCY, android.telephony.BarringInfo.BARRING_SERVICE_TYPE_SMS}" />
    </annotation>
  </item>
  <item name="android.telephony.BarringInfo.BarringServiceInfo int getBarringType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.BarringInfo.BarringServiceInfo.BARRING_TYPE_NONE, android.telephony.BarringInfo.BarringServiceInfo.BARRING_TYPE_UNCONDITIONAL, android.telephony.BarringInfo.BarringServiceInfo.BARRING_TYPE_CONDITIONAL, android.telephony.BarringInfo.BarringServiceInfo.BARRING_TYPE_UNKNOWN}" />
    </annotation>
  </item>
  <item name="android.telephony.CellIdentityNr int getNrarfcn()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="3279165" />
    </annotation>
  </item>
  <item name="android.telephony.CellIdentityNr int getPci()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="1007" />
    </annotation>
  </item>
  <item name="android.telephony.CellIdentityNr int getTac()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="65535" />
    </annotation>
  </item>
  <item name="android.telephony.CellIdentityNr int[] getBands()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.AccessNetworkConstants.NgranBands.BAND_1, android.telephony.AccessNetworkConstants.NgranBands.BAND_2, android.telephony.AccessNetworkConstants.NgranBands.BAND_3, android.telephony.AccessNetworkConstants.NgranBands.BAND_5, android.telephony.AccessNetworkConstants.NgranBands.BAND_7, android.telephony.AccessNetworkConstants.NgranBands.BAND_8, android.telephony.AccessNetworkConstants.NgranBands.BAND_12, android.telephony.AccessNetworkConstants.NgranBands.BAND_14, android.telephony.AccessNetworkConstants.NgranBands.BAND_18, android.telephony.AccessNetworkConstants.NgranBands.BAND_20, android.telephony.AccessNetworkConstants.NgranBands.BAND_25, android.telephony.AccessNetworkConstants.NgranBands.BAND_26, android.telephony.AccessNetworkConstants.NgranBands.BAND_28, android.telephony.AccessNetworkConstants.NgranBands.BAND_29, android.telephony.AccessNetworkConstants.NgranBands.BAND_30, android.telephony.AccessNetworkConstants.NgranBands.BAND_34, android.telephony.AccessNetworkConstants.NgranBands.BAND_38, android.telephony.AccessNetworkConstants.NgranBands.BAND_39, android.telephony.AccessNetworkConstants.NgranBands.BAND_40, android.telephony.AccessNetworkConstants.NgranBands.BAND_41, android.telephony.AccessNetworkConstants.NgranBands.BAND_46, android.telephony.AccessNetworkConstants.NgranBands.BAND_48, android.telephony.AccessNetworkConstants.NgranBands.BAND_50, android.telephony.AccessNetworkConstants.NgranBands.BAND_51, android.telephony.AccessNetworkConstants.NgranBands.BAND_53, android.telephony.AccessNetworkConstants.NgranBands.BAND_65, android.telephony.AccessNetworkConstants.NgranBands.BAND_66, android.telephony.AccessNetworkConstants.NgranBands.BAND_70, android.telephony.AccessNetworkConstants.NgranBands.BAND_71, android.telephony.AccessNetworkConstants.NgranBands.BAND_74, android.telephony.AccessNetworkConstants.NgranBands.BAND_75, android.telephony.AccessNetworkConstants.NgranBands.BAND_76, android.telephony.AccessNetworkConstants.NgranBands.BAND_77, android.telephony.AccessNetworkConstants.NgranBands.BAND_78, android.telephony.AccessNetworkConstants.NgranBands.BAND_79, android.telephony.AccessNetworkConstants.NgranBands.BAND_80, android.telephony.AccessNetworkConstants.NgranBands.BAND_81, android.telephony.AccessNetworkConstants.NgranBands.BAND_82, android.telephony.AccessNetworkConstants.NgranBands.BAND_83, android.telephony.AccessNetworkConstants.NgranBands.BAND_84, android.telephony.AccessNetworkConstants.NgranBands.BAND_86, android.telephony.AccessNetworkConstants.NgranBands.BAND_89, android.telephony.AccessNetworkConstants.NgranBands.BAND_90, android.telephony.AccessNetworkConstants.NgranBands.BAND_91, android.telephony.AccessNetworkConstants.NgranBands.BAND_92, android.telephony.AccessNetworkConstants.NgranBands.BAND_93, android.telephony.AccessNetworkConstants.NgranBands.BAND_94, android.telephony.AccessNetworkConstants.NgranBands.BAND_95, android.telephony.AccessNetworkConstants.NgranBands.BAND_96, android.telephony.AccessNetworkConstants.NgranBands.BAND_257, android.telephony.AccessNetworkConstants.NgranBands.BAND_258, android.telephony.AccessNetworkConstants.NgranBands.BAND_260, android.telephony.AccessNetworkConstants.NgranBands.BAND_261}" />
    </annotation>
  </item>
  <item name="android.telephony.CellInfo int getCellConnectionStatus()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.CellInfo.CONNECTION_NONE, android.telephony.CellInfo.CONNECTION_PRIMARY_SERVING, android.telephony.CellInfo.CONNECTION_SECONDARY_SERVING, android.telephony.CellInfo.CONNECTION_UNKNOWN}" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrength int getLevel()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="4" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthCdma int getLevel()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="4" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthGsm int getLevel()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="4" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthLte int getCqi()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="15" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthLte int getCqiTableIndex()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
      <val name="to" val="6" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthLte int getLevel()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="4" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthNr int getCsiCqiTableIndex()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
      <val name="to" val="3" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthNr int getLevel()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="4" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthNr java.util.List&lt;java.lang.Integer&gt; getCsiCqiReport()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="15" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthTdscdma int getLevel()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="4" />
    </annotation>
  </item>
  <item name="android.telephony.CellSignalStrengthWcdma int getLevel()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="4" />
    </annotation>
  </item>
  <item name="android.telephony.ClosedSubscriberGroupInfo int getCsgIdentity()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="134217727" />
    </annotation>
  </item>
  <item name="android.telephony.NetworkRegistrationInfo int getAccessNetworkTechnology()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.NetworkRegistrationInfo int getDomain()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.NetworkRegistrationInfo.DOMAIN_UNKNOWN, android.telephony.NetworkRegistrationInfo.DOMAIN_CS, android.telephony.NetworkRegistrationInfo.DOMAIN_PS, android.telephony.NetworkRegistrationInfo.DOMAIN_CS_PS}" />
    </annotation>
  </item>
  <item name="android.telephony.NetworkRegistrationInfo int getTransportType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}" />
    </annotation>
  </item>
  <item name="android.telephony.NetworkRegistrationInfo java.util.List&lt;java.lang.Integer&gt; getAvailableServices()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.NetworkRegistrationInfo.SERVICE_TYPE_UNKNOWN, android.telephony.NetworkRegistrationInfo.SERVICE_TYPE_VOICE, android.telephony.NetworkRegistrationInfo.SERVICE_TYPE_DATA, android.telephony.NetworkRegistrationInfo.SERVICE_TYPE_SMS, android.telephony.NetworkRegistrationInfo.SERVICE_TYPE_VIDEO, android.telephony.NetworkRegistrationInfo.SERVICE_TYPE_EMERGENCY}" />
    </annotation>
  </item>
  <item name="android.telephony.NetworkScanRequest int getScanType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, android.telephony.NetworkScanRequest.SCAN_TYPE_PERIODIC}" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneCapability void writeToParcel(android.os.Parcel, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE}" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneNumberUtils byte[] numberToCalledPartyBCD(java.lang.String, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN, android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_CALLED_PARTY}" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneNumberUtils java.lang.String calledPartyBCDFragmentToString(byte[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN, android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_CALLED_PARTY}" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneNumberUtils java.lang.String calledPartyBCDToString(byte[], int, int, int) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN, android.telephony.PhoneNumberUtils.BCD_EXTENDED_TYPE_CALLED_PARTY}" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener LISTEN_BARRING_INFO">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener LISTEN_CALL_DISCONNECT_CAUSES">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener LISTEN_IMS_CALL_DISCONNECT_CAUSES">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener LISTEN_PRECISE_DATA_CONNECTION_STATE">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener LISTEN_REGISTRATION_FAILURE">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener void onCallDisconnectCauseChanged(int, int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener void onCallDisconnectCauseChanged(int, int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.DisconnectCause.NOT_VALID, android.telephony.DisconnectCause.NOT_DISCONNECTED, android.telephony.DisconnectCause.INCOMING_MISSED, android.telephony.DisconnectCause.NORMAL, android.telephony.DisconnectCause.LOCAL, android.telephony.DisconnectCause.BUSY, android.telephony.DisconnectCause.CONGESTION, android.telephony.DisconnectCause.MMI, android.telephony.DisconnectCause.INVALID_NUMBER, android.telephony.DisconnectCause.NUMBER_UNREACHABLE, android.telephony.DisconnectCause.SERVER_UNREACHABLE, android.telephony.DisconnectCause.INVALID_CREDENTIALS, android.telephony.DisconnectCause.OUT_OF_NETWORK, android.telephony.DisconnectCause.SERVER_ERROR, android.telephony.DisconnectCause.TIMED_OUT, android.telephony.DisconnectCause.LOST_SIGNAL, android.telephony.DisconnectCause.LIMIT_EXCEEDED, android.telephony.DisconnectCause.INCOMING_REJECTED, android.telephony.DisconnectCause.POWER_OFF, android.telephony.DisconnectCause.OUT_OF_SERVICE, android.telephony.DisconnectCause.ICC_ERROR, android.telephony.DisconnectCause.CALL_BARRED, android.telephony.DisconnectCause.FDN_BLOCKED, android.telephony.DisconnectCause.CS_RESTRICTED, android.telephony.DisconnectCause.CS_RESTRICTED_NORMAL, android.telephony.DisconnectCause.CS_RESTRICTED_EMERGENCY, android.telephony.DisconnectCause.UNOBTAINABLE_NUMBER, android.telephony.DisconnectCause.CDMA_LOCKED_UNTIL_POWER_CYCLE, android.telephony.DisconnectCause.CDMA_DROP, android.telephony.DisconnectCause.CDMA_INTERCEPT, android.telephony.DisconnectCause.CDMA_REORDER, android.telephony.DisconnectCause.CDMA_SO_REJECT, android.telephony.DisconnectCause.CDMA_RETRY_ORDER, android.telephony.DisconnectCause.CDMA_ACCESS_FAILURE, android.telephony.DisconnectCause.CDMA_PREEMPTED, android.telephony.DisconnectCause.CDMA_NOT_EMERGENCY, android.telephony.DisconnectCause.CDMA_ACCESS_BLOCKED, android.telephony.DisconnectCause.ERROR_UNSPECIFIED}" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener void onCallDisconnectCauseChanged(int, int) 1">
  </item>
  <item name="android.telephony.PhoneStateListener void onCallStateChanged(int, java.lang.String) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.CALL_STATE_IDLE, android.telephony.TelephonyManager.CALL_STATE_RINGING, android.telephony.TelephonyManager.CALL_STATE_OFFHOOK}" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhoneStateListener void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getBand()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
      <val name="to" val="261" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getCellBandwidthDownlinkKhz()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getCellBandwidthUplinkKhz()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="1" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getConnectionStatus()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.PhysicalChannelConfig.CONNECTION_PRIMARY_SERVING, android.telephony.PhysicalChannelConfig.CONNECTION_SECONDARY_SERVING, android.telephony.PhysicalChannelConfig.CONNECTION_UNKNOWN}" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getDownlinkChannelNumber()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getDownlinkFrequencyKhz()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getNetworkType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getPhysicalCellId()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="1007" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getUplinkChannelNumber()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.telephony.PhysicalChannelConfig int getUplinkFrequencyKhz()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
    </annotation>
  </item>
  <item name="android.telephony.PreciseDataConnectionState int getLastCauseCode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.DataFailCause.NONE, android.telephony.DataFailCause.OPERATOR_BARRED, android.telephony.DataFailCause.NAS_SIGNALLING, android.telephony.DataFailCause.LLC_SNDCP, android.telephony.DataFailCause.INSUFFICIENT_RESOURCES, android.telephony.DataFailCause.MISSING_UNKNOWN_APN, android.telephony.DataFailCause.UNKNOWN_PDP_ADDRESS_TYPE, android.telephony.DataFailCause.USER_AUTHENTICATION, android.telephony.DataFailCause.ACTIVATION_REJECT_GGSN, android.telephony.DataFailCause.ACTIVATION_REJECT_UNSPECIFIED, android.telephony.DataFailCause.SERVICE_OPTION_NOT_SUPPORTED, android.telephony.DataFailCause.SERVICE_OPTION_NOT_SUBSCRIBED, android.telephony.DataFailCause.SERVICE_OPTION_OUT_OF_ORDER, android.telephony.DataFailCause.NSAPI_IN_USE, android.telephony.DataFailCause.REGULAR_DEACTIVATION, android.telephony.DataFailCause.QOS_NOT_ACCEPTED, android.telephony.DataFailCause.NETWORK_FAILURE, android.telephony.DataFailCause.UMTS_REACTIVATION_REQ, android.telephony.DataFailCause.FEATURE_NOT_SUPP, android.telephony.DataFailCause.TFT_SEMANTIC_ERROR, android.telephony.DataFailCause.TFT_SYTAX_ERROR, android.telephony.DataFailCause.UNKNOWN_PDP_CONTEXT, android.telephony.DataFailCause.FILTER_SEMANTIC_ERROR, android.telephony.DataFailCause.FILTER_SYTAX_ERROR, android.telephony.DataFailCause.PDP_WITHOUT_ACTIVE_TFT, android.telephony.DataFailCause.ACTIVATION_REJECTED_BCM_VIOLATION, android.telephony.DataFailCause.ONLY_IPV4_ALLOWED, android.telephony.DataFailCause.ONLY_IPV6_ALLOWED, android.telephony.DataFailCause.ONLY_SINGLE_BEARER_ALLOWED, android.telephony.DataFailCause.ESM_INFO_NOT_RECEIVED, android.telephony.DataFailCause.PDN_CONN_DOES_NOT_EXIST, android.telephony.DataFailCause.MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED, android.telephony.DataFailCause.COLLISION_WITH_NETWORK_INITIATED_REQUEST, android.telephony.DataFailCause.ONLY_IPV4V6_ALLOWED, android.telephony.DataFailCause.ONLY_NON_IP_ALLOWED, android.telephony.DataFailCause.UNSUPPORTED_QCI_VALUE, android.telephony.DataFailCause.BEARER_HANDLING_NOT_SUPPORTED, android.telephony.DataFailCause.ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHED, android.telephony.DataFailCause.UNSUPPORTED_APN_IN_CURRENT_PLMN, android.telephony.DataFailCause.INVALID_TRANSACTION_ID, android.telephony.DataFailCause.MESSAGE_INCORRECT_SEMANTIC, android.telephony.DataFailCause.INVALID_MANDATORY_INFO, android.telephony.DataFailCause.MESSAGE_TYPE_UNSUPPORTED, android.telephony.DataFailCause.MSG_TYPE_NONCOMPATIBLE_STATE, android.telephony.DataFailCause.UNKNOWN_INFO_ELEMENT, android.telephony.DataFailCause.CONDITIONAL_IE_ERROR, android.telephony.DataFailCause.MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE, android.telephony.DataFailCause.PROTOCOL_ERRORS, android.telephony.DataFailCause.APN_TYPE_CONFLICT, android.telephony.DataFailCause.INVALID_PCSCF_ADDR, android.telephony.DataFailCause.INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN, android.telephony.DataFailCause.EMM_ACCESS_BARRED, android.telephony.DataFailCause.EMERGENCY_IFACE_ONLY, android.telephony.DataFailCause.IFACE_MISMATCH, android.telephony.DataFailCause.COMPANION_IFACE_IN_USE, android.telephony.DataFailCause.IP_ADDRESS_MISMATCH, android.telephony.DataFailCause.IFACE_AND_POL_FAMILY_MISMATCH, android.telephony.DataFailCause.EMM_ACCESS_BARRED_INFINITE_RETRY, android.telephony.DataFailCause.AUTH_FAILURE_ON_EMERGENCY_CALL, android.telephony.DataFailCause.INVALID_DNS_ADDR, android.telephony.DataFailCause.INVALID_PCSCF_OR_DNS_ADDRESS, android.telephony.DataFailCause.CALL_PREEMPT_BY_EMERGENCY_APN, android.telephony.DataFailCause.UE_INITIATED_DETACH_OR_DISCONNECT, android.telephony.DataFailCause.MIP_FA_REASON_UNSPECIFIED, android.telephony.DataFailCause.MIP_FA_ADMIN_PROHIBITED, android.telephony.DataFailCause.MIP_FA_INSUFFICIENT_RESOURCES, android.telephony.DataFailCause.MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILURE, android.telephony.DataFailCause.MIP_FA_HOME_AGENT_AUTHENTICATION_FAILURE, android.telephony.DataFailCause.MIP_FA_REQUESTED_LIFETIME_TOO_LONG, android.telephony.DataFailCause.MIP_FA_MALFORMED_REQUEST, android.telephony.DataFailCause.MIP_FA_MALFORMED_REPLY, android.telephony.DataFailCause.MIP_FA_ENCAPSULATION_UNAVAILABLE, android.telephony.DataFailCause.MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLE, android.telephony.DataFailCause.MIP_FA_REVERSE_TUNNEL_UNAVAILABLE, android.telephony.DataFailCause.MIP_FA_REVERSE_TUNNEL_IS_MANDATORY, android.telephony.DataFailCause.MIP_FA_DELIVERY_STYLE_NOT_SUPPORTED, android.telephony.DataFailCause.MIP_FA_MISSING_NAI, android.telephony.DataFailCause.MIP_FA_MISSING_HOME_AGENT, android.telephony.DataFailCause.MIP_FA_MISSING_HOME_ADDRESS, android.telephony.DataFailCause.MIP_FA_UNKNOWN_CHALLENGE, android.telephony.DataFailCause.MIP_FA_MISSING_CHALLENGE, android.telephony.DataFailCause.MIP_FA_STALE_CHALLENGE, android.telephony.DataFailCause.MIP_HA_REASON_UNSPECIFIED, android.telephony.DataFailCause.MIP_HA_ADMIN_PROHIBITED, android.telephony.DataFailCause.MIP_HA_INSUFFICIENT_RESOURCES, android.telephony.DataFailCause.MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILURE, android.telephony.DataFailCause.MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILURE, android.telephony.DataFailCause.MIP_HA_REGISTRATION_ID_MISMATCH, android.telephony.DataFailCause.MIP_HA_MALFORMED_REQUEST, android.telephony.DataFailCause.MIP_HA_UNKNOWN_HOME_AGENT_ADDRESS, android.telephony.DataFailCause.MIP_HA_REVERSE_TUNNEL_UNAVAILABLE, android.telephony.DataFailCause.MIP_HA_REVERSE_TUNNEL_IS_MANDATORY, android.telephony.DataFailCause.MIP_HA_ENCAPSULATION_UNAVAILABLE, android.telephony.DataFailCause.CLOSE_IN_PROGRESS, android.telephony.DataFailCause.NETWORK_INITIATED_TERMINATION, android.telephony.DataFailCause.MODEM_APP_PREEMPTED, android.telephony.DataFailCause.PDN_IPV4_CALL_DISALLOWED, android.telephony.DataFailCause.PDN_IPV4_CALL_THROTTLED, android.telephony.DataFailCause.PDN_IPV6_CALL_DISALLOWED, android.telephony.DataFailCause.PDN_IPV6_CALL_THROTTLED, android.telephony.DataFailCause.MODEM_RESTART, android.telephony.DataFailCause.PDP_PPP_NOT_SUPPORTED, android.telephony.DataFailCause.UNPREFERRED_RAT, android.telephony.DataFailCause.PHYSICAL_LINK_CLOSE_IN_PROGRESS, android.telephony.DataFailCause.APN_PENDING_HANDOVER, android.telephony.DataFailCause.PROFILE_BEARER_INCOMPATIBLE, android.telephony.DataFailCause.SIM_CARD_CHANGED, android.telephony.DataFailCause.LOW_POWER_MODE_OR_POWERING_DOWN, android.telephony.DataFailCause.APN_DISABLED, android.telephony.DataFailCause.MAX_PPP_INACTIVITY_TIMER_EXPIRED, android.telephony.DataFailCause.IPV6_ADDRESS_TRANSFER_FAILED, android.telephony.DataFailCause.TRAT_SWAP_FAILED, android.telephony.DataFailCause.EHRPD_TO_HRPD_FALLBACK, android.telephony.DataFailCause.MIP_CONFIG_FAILURE, android.telephony.DataFailCause.PDN_INACTIVITY_TIMER_EXPIRED, android.telephony.DataFailCause.MAX_IPV4_CONNECTIONS, android.telephony.DataFailCause.MAX_IPV6_CONNECTIONS, android.telephony.DataFailCause.APN_MISMATCH, android.telephony.DataFailCause.IP_VERSION_MISMATCH, android.telephony.DataFailCause.DUN_CALL_DISALLOWED, android.telephony.DataFailCause.INTERNAL_EPC_NONEPC_TRANSITION, android.telephony.DataFailCause.INTERFACE_IN_USE, android.telephony.DataFailCause.APN_DISALLOWED_ON_ROAMING, android.telephony.DataFailCause.APN_PARAMETERS_CHANGED, android.telephony.DataFailCause.NULL_APN_DISALLOWED, android.telephony.DataFailCause.THERMAL_MITIGATION, android.telephony.DataFailCause.DATA_SETTINGS_DISABLED, android.telephony.DataFailCause.DATA_ROAMING_SETTINGS_DISABLED, android.telephony.DataFailCause.DDS_SWITCHED, android.telephony.DataFailCause.FORBIDDEN_APN_NAME, android.telephony.DataFailCause.DDS_SWITCH_IN_PROGRESS, android.telephony.DataFailCause.CALL_DISALLOWED_IN_ROAMING, android.telephony.DataFailCause.NON_IP_NOT_SUPPORTED, android.telephony.DataFailCause.PDN_NON_IP_CALL_THROTTLED, android.telephony.DataFailCause.PDN_NON_IP_CALL_DISALLOWED, android.telephony.DataFailCause.CDMA_LOCK, android.telephony.DataFailCause.CDMA_INTERCEPT, android.telephony.DataFailCause.CDMA_REORDER, android.telephony.DataFailCause.CDMA_RELEASE_DUE_TO_SO_REJECTION, android.telephony.DataFailCause.CDMA_INCOMING_CALL, android.telephony.DataFailCause.CDMA_ALERT_STOP, android.telephony.DataFailCause.CHANNEL_ACQUISITION_FAILURE, android.telephony.DataFailCause.MAX_ACCESS_PROBE, android.telephony.DataFailCause.CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATION, android.telephony.DataFailCause.NO_RESPONSE_FROM_BASE_STATION, android.telephony.DataFailCause.REJECTED_BY_BASE_STATION, android.telephony.DataFailCause.CONCURRENT_SERVICES_INCOMPATIBLE, android.telephony.DataFailCause.NO_CDMA_SERVICE, android.telephony.DataFailCause.RUIM_NOT_PRESENT, android.telephony.DataFailCause.CDMA_RETRY_ORDER, android.telephony.DataFailCause.ACCESS_BLOCK, android.telephony.DataFailCause.ACCESS_BLOCK_ALL, android.telephony.DataFailCause.IS707B_MAX_ACCESS_PROBES, android.telephony.DataFailCause.THERMAL_EMERGENCY, android.telephony.DataFailCause.CONCURRENT_SERVICES_NOT_ALLOWED, android.telephony.DataFailCause.INCOMING_CALL_REJECTED, android.telephony.DataFailCause.NO_SERVICE_ON_GATEWAY, android.telephony.DataFailCause.NO_GPRS_CONTEXT, android.telephony.DataFailCause.ILLEGAL_MS, android.telephony.DataFailCause.ILLEGAL_ME, android.telephony.DataFailCause.GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWED, android.telephony.DataFailCause.GPRS_SERVICES_NOT_ALLOWED, android.telephony.DataFailCause.MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK, android.telephony.DataFailCause.IMPLICITLY_DETACHED, android.telephony.DataFailCause.PLMN_NOT_ALLOWED, android.telephony.DataFailCause.LOCATION_AREA_NOT_ALLOWED, android.telephony.DataFailCause.GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMN, android.telephony.DataFailCause.PDP_DUPLICATE, android.telephony.DataFailCause.UE_RAT_CHANGE, android.telephony.DataFailCause.CONGESTION, android.telephony.DataFailCause.NO_PDP_CONTEXT_ACTIVATED, android.telephony.DataFailCause.ACCESS_CLASS_DSAC_REJECTION, android.telephony.DataFailCause.PDP_ACTIVATE_MAX_RETRY_FAILED, android.telephony.DataFailCause.RADIO_ACCESS_BEARER_FAILURE, android.telephony.DataFailCause.ESM_UNKNOWN_EPS_BEARER_CONTEXT, android.telephony.DataFailCause.DRB_RELEASED_BY_RRC, android.telephony.DataFailCause.CONNECTION_RELEASED, android.telephony.DataFailCause.EMM_DETACHED, android.telephony.DataFailCause.EMM_ATTACH_FAILED, android.telephony.DataFailCause.EMM_ATTACH_STARTED, android.telephony.DataFailCause.LTE_NAS_SERVICE_REQUEST_FAILED, android.telephony.DataFailCause.DUPLICATE_BEARER_ID, android.telephony.DataFailCause.ESM_COLLISION_SCENARIOS, android.telephony.DataFailCause.ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORK, android.telephony.DataFailCause.ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARER, android.telephony.DataFailCause.ESM_BAD_OTA_MESSAGE, android.telephony.DataFailCause.ESM_DOWNLOAD_SERVER_REJECTED_THE_CALL, android.telephony.DataFailCause.ESM_CONTEXT_TRANSFERRED_DUE_TO_IRAT, android.telephony.DataFailCause.DS_EXPLICIT_DEACTIVATION, android.telephony.DataFailCause.ESM_LOCAL_CAUSE_NONE, android.telephony.DataFailCause.LTE_THROTTLING_NOT_REQUIRED, android.telephony.DataFailCause.ACCESS_CONTROL_LIST_CHECK_FAILURE, android.telephony.DataFailCause.SERVICE_NOT_ALLOWED_ON_PLMN, android.telephony.DataFailCause.EMM_T3417_EXPIRED, android.telephony.DataFailCause.EMM_T3417_EXT_EXPIRED, android.telephony.DataFailCause.RRC_UPLINK_DATA_TRANSMISSION_FAILURE, android.telephony.DataFailCause.RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVER, android.telephony.DataFailCause.RRC_UPLINK_CONNECTION_RELEASE, android.telephony.DataFailCause.RRC_UPLINK_RADIO_LINK_FAILURE, android.telephony.DataFailCause.RRC_UPLINK_ERROR_REQUEST_FROM_NAS, android.telephony.DataFailCause.RRC_CONNECTION_ACCESS_STRATUM_FAILURE, android.telephony.DataFailCause.RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESS, android.telephony.DataFailCause.RRC_CONNECTION_ACCESS_BARRED, android.telephony.DataFailCause.RRC_CONNECTION_CELL_RESELECTION, android.telephony.DataFailCause.RRC_CONNECTION_CONFIG_FAILURE, android.telephony.DataFailCause.RRC_CONNECTION_TIMER_EXPIRED, android.telephony.DataFailCause.RRC_CONNECTION_LINK_FAILURE, android.telephony.DataFailCause.RRC_CONNECTION_CELL_NOT_CAMPED, android.telephony.DataFailCause.RRC_CONNECTION_SYSTEM_INTERVAL_FAILURE, android.telephony.DataFailCause.RRC_CONNECTION_REJECT_BY_NETWORK, android.telephony.DataFailCause.RRC_CONNECTION_NORMAL_RELEASE, android.telephony.DataFailCause.RRC_CONNECTION_RADIO_LINK_FAILURE, android.telephony.DataFailCause.RRC_CONNECTION_REESTABLISHMENT_FAILURE, android.telephony.DataFailCause.RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTER, android.telephony.DataFailCause.RRC_CONNECTION_ABORT_REQUEST, android.telephony.DataFailCause.RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERROR, android.telephony.DataFailCause.NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACH, android.telephony.DataFailCause.NETWORK_INITIATED_DETACH_NO_AUTO_REATTACH, android.telephony.DataFailCause.ESM_PROCEDURE_TIME_OUT, android.telephony.DataFailCause.INVALID_CONNECTION_ID, android.telephony.DataFailCause.MAXIMIUM_NSAPIS_EXCEEDED, android.telephony.DataFailCause.INVALID_PRIMARY_NSAPI, android.telephony.DataFailCause.CANNOT_ENCODE_OTA_MESSAGE, android.telephony.DataFailCause.RADIO_ACCESS_BEARER_SETUP_FAILURE, android.telephony.DataFailCause.PDP_ESTABLISH_TIMEOUT_EXPIRED, android.telephony.DataFailCause.PDP_MODIFY_TIMEOUT_EXPIRED, android.telephony.DataFailCause.PDP_INACTIVE_TIMEOUT_EXPIRED, android.telephony.DataFailCause.PDP_LOWERLAYER_ERROR, android.telephony.DataFailCause.PDP_MODIFY_COLLISION, android.telephony.DataFailCause.MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDED, android.telephony.DataFailCause.NAS_REQUEST_REJECTED_BY_NETWORK, android.telephony.DataFailCause.RRC_CONNECTION_INVALID_REQUEST, android.telephony.DataFailCause.RRC_CONNECTION_TRACKING_AREA_ID_CHANGED, android.telephony.DataFailCause.RRC_CONNECTION_RF_UNAVAILABLE, android.telephony.DataFailCause.RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGE, android.telephony.DataFailCause.RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVE, android.telephony.DataFailCause.RRC_CONNECTION_ABORTED_AFTER_HANDOVER, android.telephony.DataFailCause.RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGE, android.telephony.DataFailCause.RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGE, android.telephony.DataFailCause.IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVER, android.telephony.DataFailCause.IMEI_NOT_ACCEPTED, android.telephony.DataFailCause.EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWED, android.telephony.DataFailCause.EPS_SERVICES_NOT_ALLOWED_IN_PLMN, android.telephony.DataFailCause.MSC_TEMPORARILY_NOT_REACHABLE, android.telephony.DataFailCause.CS_DOMAIN_NOT_AVAILABLE, android.telephony.DataFailCause.ESM_FAILURE, android.telephony.DataFailCause.MAC_FAILURE, android.telephony.DataFailCause.SYNCHRONIZATION_FAILURE, android.telephony.DataFailCause.UE_SECURITY_CAPABILITIES_MISMATCH, android.telephony.DataFailCause.SECURITY_MODE_REJECTED, android.telephony.DataFailCause.UNACCEPTABLE_NON_EPS_AUTHENTICATION, android.telephony.DataFailCause.CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWED, android.telephony.DataFailCause.NO_EPS_BEARER_CONTEXT_ACTIVATED, android.telephony.DataFailCause.INVALID_EMM_STATE, android.telephony.DataFailCause.NAS_LAYER_FAILURE, android.telephony.DataFailCause.MULTIPLE_PDP_CALL_NOT_ALLOWED, android.telephony.DataFailCause.EMBMS_NOT_ENABLED, android.telephony.DataFailCause.IRAT_HANDOVER_FAILED, android.telephony.DataFailCause.EMBMS_REGULAR_DEACTIVATION, android.telephony.DataFailCause.TEST_LOOPBACK_REGULAR_DEACTIVATION, android.telephony.DataFailCause.LOWER_LAYER_REGISTRATION_FAILURE, android.telephony.DataFailCause.DATA_PLAN_EXPIRED, android.telephony.DataFailCause.UMTS_HANDOVER_TO_IWLAN, android.telephony.DataFailCause.EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSY, android.telephony.DataFailCause.EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILURE, android.telephony.DataFailCause.EVDO_HDR_CHANGED, android.telephony.DataFailCause.EVDO_HDR_EXITED, android.telephony.DataFailCause.EVDO_HDR_NO_SESSION, android.telephony.DataFailCause.EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALL, android.telephony.DataFailCause.EVDO_HDR_CONNECTION_SETUP_TIMEOUT, android.telephony.DataFailCause.FAILED_TO_ACQUIRE_COLOCATED_HDR, android.telephony.DataFailCause.OTASP_COMMIT_IN_PROGRESS, android.telephony.DataFailCause.NO_HYBRID_HDR_SERVICE, android.telephony.DataFailCause.HDR_NO_LOCK_GRANTED, android.telephony.DataFailCause.DBM_OR_SMS_IN_PROGRESS, android.telephony.DataFailCause.HDR_FADE, android.telephony.DataFailCause.HDR_ACCESS_FAILURE, android.telephony.DataFailCause.UNSUPPORTED_1X_PREV, android.telephony.DataFailCause.LOCAL_END, android.telephony.DataFailCause.NO_SERVICE, android.telephony.DataFailCause.FADE, android.telephony.DataFailCause.NORMAL_RELEASE, android.telephony.DataFailCause.ACCESS_ATTEMPT_ALREADY_IN_PROGRESS, android.telephony.DataFailCause.REDIRECTION_OR_HANDOFF_IN_PROGRESS, android.telephony.DataFailCause.EMERGENCY_MODE, android.telephony.DataFailCause.PHONE_IN_USE, android.telephony.DataFailCause.INVALID_MODE, android.telephony.DataFailCause.INVALID_SIM_STATE, android.telephony.DataFailCause.NO_COLLOCATED_HDR, android.telephony.DataFailCause.UE_IS_ENTERING_POWERSAVE_MODE, android.telephony.DataFailCause.DUAL_SWITCH, android.telephony.DataFailCause.PPP_TIMEOUT, android.telephony.DataFailCause.PPP_AUTH_FAILURE, android.telephony.DataFailCause.PPP_OPTION_MISMATCH, android.telephony.DataFailCause.PPP_PAP_FAILURE, android.telephony.DataFailCause.PPP_CHAP_FAILURE, android.telephony.DataFailCause.PPP_CLOSE_IN_PROGRESS, android.telephony.DataFailCause.LIMITED_TO_IPV4, android.telephony.DataFailCause.LIMITED_TO_IPV6, android.telephony.DataFailCause.VSNCP_TIMEOUT, android.telephony.DataFailCause.VSNCP_GEN_ERROR, android.telephony.DataFailCause.VSNCP_APN_UNAUTHORIZED, android.telephony.DataFailCause.VSNCP_PDN_LIMIT_EXCEEDED, android.telephony.DataFailCause.VSNCP_NO_PDN_GATEWAY_ADDRESS, android.telephony.DataFailCause.VSNCP_PDN_GATEWAY_UNREACHABLE, android.telephony.DataFailCause.VSNCP_PDN_GATEWAY_REJECT, android.telephony.DataFailCause.VSNCP_INSUFFICIENT_PARAMETERS, android.telephony.DataFailCause.VSNCP_RESOURCE_UNAVAILABLE, android.telephony.DataFailCause.VSNCP_ADMINISTRATIVELY_PROHIBITED, android.telephony.DataFailCause.VSNCP_PDN_ID_IN_USE, android.telephony.DataFailCause.VSNCP_SUBSCRIBER_LIMITATION, android.telephony.DataFailCause.VSNCP_PDN_EXISTS_FOR_THIS_APN, android.telephony.DataFailCause.VSNCP_RECONNECT_NOT_ALLOWED, android.telephony.DataFailCause.IPV6_PREFIX_UNAVAILABLE, android.telephony.DataFailCause.HANDOFF_PREFERENCE_CHANGED, android.telephony.DataFailCause.OEM_DCFAILCAUSE_1, android.telephony.DataFailCause.OEM_DCFAILCAUSE_2, android.telephony.DataFailCause.OEM_DCFAILCAUSE_3, android.telephony.DataFailCause.OEM_DCFAILCAUSE_4, android.telephony.DataFailCause.OEM_DCFAILCAUSE_5, android.telephony.DataFailCause.OEM_DCFAILCAUSE_6, android.telephony.DataFailCause.OEM_DCFAILCAUSE_7, android.telephony.DataFailCause.OEM_DCFAILCAUSE_8, android.telephony.DataFailCause.OEM_DCFAILCAUSE_9, android.telephony.DataFailCause.OEM_DCFAILCAUSE_10, android.telephony.DataFailCause.OEM_DCFAILCAUSE_11, android.telephony.DataFailCause.OEM_DCFAILCAUSE_12, android.telephony.DataFailCause.OEM_DCFAILCAUSE_13, android.telephony.DataFailCause.OEM_DCFAILCAUSE_14, android.telephony.DataFailCause.OEM_DCFAILCAUSE_15, android.telephony.DataFailCause.REGISTRATION_FAIL, android.telephony.DataFailCause.GPRS_REGISTRATION_FAIL, android.telephony.DataFailCause.SIGNAL_LOST, android.telephony.DataFailCause.PREF_RADIO_TECH_CHANGED, android.telephony.DataFailCause.RADIO_POWER_OFF, android.telephony.DataFailCause.TETHERED_CALL_ACTIVE, android.telephony.DataFailCause.ERROR_UNSPECIFIED, android.telephony.DataFailCause.UNKNOWN, android.telephony.DataFailCause.RADIO_NOT_AVAILABLE, android.telephony.DataFailCause.UNACCEPTABLE_NETWORK_PARAMETER, android.telephony.DataFailCause.LOST_CONNECTION}" />
    </annotation>
  </item>
  <item name="android.telephony.PreciseDataConnectionState int getNetworkType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.PreciseDataConnectionState int getState()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.DATA_UNKNOWN, android.telephony.TelephonyManager.DATA_DISCONNECTED, android.telephony.TelephonyManager.DATA_CONNECTING, android.telephony.TelephonyManager.DATA_CONNECTED, android.telephony.TelephonyManager.DATA_SUSPENDED}" />
    </annotation>
  </item>
  <item name="android.telephony.PreciseDataConnectionState int getTransportType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WWAN, android.telephony.AccessNetworkConstants.TRANSPORT_TYPE_WLAN}" />
    </annotation>
  </item>
  <item name="android.telephony.ServiceState int getDuplexMode()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.ServiceState.DUPLEX_MODE_UNKNOWN, android.telephony.ServiceState.DUPLEX_MODE_FDD, android.telephony.ServiceState.DUPLEX_MODE_TDD}" />
    </annotation>
  </item>
  <item name="android.telephony.SignalThresholdInfo int getRadioAccessNetworkType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN, android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN, android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000, android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN, android.telephony.AccessNetworkConstants.AccessNetworkType.NGRAN}" />
    </annotation>
  </item>
  <item name="android.telephony.SignalThresholdInfo int getSignalMeasurementType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_UNKNOWN, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSSI, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSCP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSRP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSRQ, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSSNR, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSRSRP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSRSRQ, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSSINR}" />
    </annotation>
  </item>
  <item name="android.telephony.SignalThresholdInfo.Builder android.telephony.SignalThresholdInfo.Builder setRadioAccessNetworkType(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN, android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN, android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000, android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN, android.telephony.AccessNetworkConstants.AccessNetworkType.NGRAN}" />
    </annotation>
  </item>
  <item name="android.telephony.SignalThresholdInfo.Builder android.telephony.SignalThresholdInfo.Builder setSignalMeasurementType(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_UNKNOWN, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSSI, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSCP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSRP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSRQ, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_RSSNR, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSRSRP, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSRSRQ, android.telephony.SignalThresholdInfo.SIGNAL_MEASUREMENT_TYPE_SSSINR}" />
    </annotation>
  </item>
  <item name="android.telephony.SmsManager boolean setSmscAddress(java.lang.String)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SmsManager int getSmsCapacityOnIcc()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SmsManager java.lang.String getSmscAddress()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SmsManager void getSmsMessagesForFinancialApp(android.os.Bundle, java.util.concurrent.Executor, android.telephony.SmsManager.FinancialSmsCallback)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.SMS_FINANCIAL_TRANSACTIONS&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SmsManager void injectSmsPdu(byte[], java.lang.String, android.app.PendingIntent) 1">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.telephony.SmsMessage.FORMAT_3GPP, android.telephony.SmsMessage.FORMAT_3GPP2}" />
    </annotation>
  </item>
  <item name="android.telephony.SmsManager void sendTextMessageWithoutPersisting(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.MODIFY_PHONE_STATE&quot;, &quot;android.permission.SEND_SMS&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionInfo int getSubscriptionType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.SubscriptionManager.SUBSCRIPTION_TYPE_LOCAL_SIM, android.telephony.SubscriptionManager.SUBSCRIPTION_TYPE_REMOTE_SIM}" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager android.os.ParcelUuid createSubscriptionGroup(java.util.List<java.lang.Integer>)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager boolean isActiveSubscriptionId(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager boolean setOpportunistic(boolean, int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager int getActiveSubscriptionInfoCount()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager java.util.List&lt;android.telephony.SubscriptionInfo&gt; getActiveSubscriptionInfoList()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager java.util.List&lt;android.telephony.SubscriptionInfo&gt; getOpportunisticSubscriptions()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager java.util.List&lt;android.telephony.SubscriptionInfo&gt; getSubscriptionsInGroup(android.os.ParcelUuid)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager void addSubscriptionsIntoGroup(java.util.List<java.lang.Integer>, android.os.ParcelUuid)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager void removeSubscriptionsFromGroup(java.util.List<java.lang.Integer>, android.os.ParcelUuid)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager void setSubscriptionOverrideCongested(int, boolean, int[], long) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager void setSubscriptionOverrideUnmetered(int, boolean, int[], long) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionManager void switchToSubscription(int, android.app.PendingIntent)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.WRITE_EMBEDDED_SUBSCRIPTIONS&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionPlan int getDataLimitBehavior()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_UNKNOWN, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_DISABLED, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_BILLED, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_THROTTLED}" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionPlan int[] getNetworkTypes()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionPlan.Builder android.telephony.SubscriptionPlan.Builder setDataLimit(long, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_UNKNOWN, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_DISABLED, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_BILLED, android.telephony.SubscriptionPlan.LIMIT_BEHAVIOR_THROTTLED}" />
    </annotation>
  </item>
  <item name="android.telephony.SubscriptionPlan.Builder android.telephony.SubscriptionPlan.Builder setNetworkTypes(int[]) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.ActiveDataSubscriptionIdListener void onActiveDataSubscriptionIdChanged(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.AlwaysReportedSignalStrengthListener void onSignalStrengthsChanged(android.telephony.SignalStrength)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.LISTEN_ALWAYS_REPORTED_SIGNAL_STRENGTH&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.BarringInfoListener void onBarringInfoChanged(android.telephony.BarringInfo)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;, &quot;android.permission.ACCESS_FINE_LOCATION&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.CallDisconnectCauseListener void onCallDisconnectCauseChanged(int, int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.CallDisconnectCauseListener void onCallDisconnectCauseChanged(int, int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.DisconnectCause.NOT_VALID, android.telephony.DisconnectCause.NOT_DISCONNECTED, android.telephony.DisconnectCause.INCOMING_MISSED, android.telephony.DisconnectCause.NORMAL, android.telephony.DisconnectCause.LOCAL, android.telephony.DisconnectCause.BUSY, android.telephony.DisconnectCause.CONGESTION, android.telephony.DisconnectCause.MMI, android.telephony.DisconnectCause.INVALID_NUMBER, android.telephony.DisconnectCause.NUMBER_UNREACHABLE, android.telephony.DisconnectCause.SERVER_UNREACHABLE, android.telephony.DisconnectCause.INVALID_CREDENTIALS, android.telephony.DisconnectCause.OUT_OF_NETWORK, android.telephony.DisconnectCause.SERVER_ERROR, android.telephony.DisconnectCause.TIMED_OUT, android.telephony.DisconnectCause.LOST_SIGNAL, android.telephony.DisconnectCause.LIMIT_EXCEEDED, android.telephony.DisconnectCause.INCOMING_REJECTED, android.telephony.DisconnectCause.POWER_OFF, android.telephony.DisconnectCause.OUT_OF_SERVICE, android.telephony.DisconnectCause.ICC_ERROR, android.telephony.DisconnectCause.CALL_BARRED, android.telephony.DisconnectCause.FDN_BLOCKED, android.telephony.DisconnectCause.CS_RESTRICTED, android.telephony.DisconnectCause.CS_RESTRICTED_NORMAL, android.telephony.DisconnectCause.CS_RESTRICTED_EMERGENCY, android.telephony.DisconnectCause.UNOBTAINABLE_NUMBER, android.telephony.DisconnectCause.CDMA_LOCKED_UNTIL_POWER_CYCLE, android.telephony.DisconnectCause.CDMA_DROP, android.telephony.DisconnectCause.CDMA_INTERCEPT, android.telephony.DisconnectCause.CDMA_REORDER, android.telephony.DisconnectCause.CDMA_SO_REJECT, android.telephony.DisconnectCause.CDMA_RETRY_ORDER, android.telephony.DisconnectCause.CDMA_ACCESS_FAILURE, android.telephony.DisconnectCause.CDMA_PREEMPTED, android.telephony.DisconnectCause.CDMA_NOT_EMERGENCY, android.telephony.DisconnectCause.CDMA_ACCESS_BLOCKED, android.telephony.DisconnectCause.ERROR_UNSPECIFIED}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.CallDisconnectCauseListener void onCallDisconnectCauseChanged(int, int) 1">
  </item>
  <item name="android.telephony.TelephonyCallback.CallForwardingIndicatorListener void onCallForwardingIndicatorChanged(boolean)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.CallStateListener void onCallStateChanged(int, java.lang.String)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_CALL_LOG&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.CallStateListener void onCallStateChanged(int, java.lang.String) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.CALL_STATE_IDLE, android.telephony.TelephonyManager.CALL_STATE_RINGING, android.telephony.TelephonyManager.CALL_STATE_OFFHOOK}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.CellInfoListener void onCellInfoChanged(java.util.List<android.telephony.CellInfo>)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_FINE_LOCATION&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.CellLocationListener void onCellLocationChanged(android.telephony.CellLocation)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_FINE_LOCATION&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.DataActivationStateListener void onDataActivationStateChanged(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.DataActivationStateListener void onDataActivationStateChanged(int) 0">
  </item>
  <item name="android.telephony.TelephonyCallback.DataActivityListener void onDataActivity(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.DataActivityListener void onDataActivity(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.DATA_ACTIVITY_NONE, android.telephony.TelephonyManager.DATA_ACTIVITY_IN, android.telephony.TelephonyManager.DATA_ACTIVITY_OUT, android.telephony.TelephonyManager.DATA_ACTIVITY_INOUT, android.telephony.TelephonyManager.DATA_ACTIVITY_DORMANT}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.DataConnectionStateListener void onDataConnectionStateChanged(int, int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.DataConnectionStateListener void onDataConnectionStateChanged(int, int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.DATA_UNKNOWN, android.telephony.TelephonyManager.DATA_DISCONNECTED, android.telephony.TelephonyManager.DATA_CONNECTING, android.telephony.TelephonyManager.DATA_CONNECTED, android.telephony.TelephonyManager.DATA_SUSPENDED, android.telephony.TelephonyManager.DATA_DISCONNECTING}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.DataConnectionStateListener void onDataConnectionStateChanged(int, int) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.DisplayInfoListener void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.EmergencyNumberListListener void onEmergencyNumberListChanged(java.util.Map<java.lang.Integer,java.util.List<android.telephony.emergency.EmergencyNumber>>)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.ImsCallDisconnectCauseListener void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.MessageWaitingIndicatorListener void onMessageWaitingIndicatorChanged(boolean)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.PhysicalChannelConfigListener void onPhysicalChannelConfigChanged(java.util.List<android.telephony.PhysicalChannelConfig>)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.PreciseDataConnectionStateListener void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.RegistrationFailedListener void onRegistrationFailed(android.telephony.CellIdentity, java.lang.String, int, int, int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;, &quot;android.permission.ACCESS_FINE_LOCATION&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.RegistrationFailedListener void onRegistrationFailed(android.telephony.CellIdentity, java.lang.String, int, int, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.NetworkRegistrationInfo.DOMAIN_UNKNOWN, android.telephony.NetworkRegistrationInfo.DOMAIN_CS, android.telephony.NetworkRegistrationInfo.DOMAIN_PS, android.telephony.NetworkRegistrationInfo.DOMAIN_CS_PS}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.ServiceStateListener void onServiceStateChanged(android.telephony.ServiceState)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.SignalStrengthsListener void onSignalStrengthsChanged(android.telephony.SignalStrength)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyCallback.UserMobileDataStateListener void onUserMobileDataStateChanged(boolean)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyDisplayInfo int getNetworkType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyDisplayInfo int getOverrideNetworkType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NONE, android.telephony.TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_LTE_CA, android.telephony.TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PRO, android.telephony.TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA, android.telephony.TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager ACTION_PHONE_STATE_CHANGED">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager android.os.PersistableBundle getCarrierConfig()">
    <annotation name="androidx.annotation.WorkerThread"/>
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager android.telephony.CellLocation getCellLocation()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_FINE_LOCATION&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest, java.util.concurrent.Executor, android.telephony.TelephonyScanManager.NetworkScanCallback)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.MODIFY_PHONE_STATE&quot;, &quot;android.permission.ACCESS_FINE_LOCATION&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager android.telephony.ServiceState getServiceState()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="allOf" val="{&quot;android.permission.READ_PHONE_STATE&quot;, &quot;android.permission.ACCESS_COARSE_LOCATION&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean doesSwitchMultiSimConfigTriggerReboot()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean isDataConnectionAllowed()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.ACCESS_NETWORK_STATE&quot;, &quot;android.permission.READ_PHONE_STATE&quot;, &quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean isDataEnabled()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.ACCESS_NETWORK_STATE&quot;, &quot;android.permission.MODIFY_PHONE_STATE&quot;, &quot;android.permission.READ_PHONE_STATE&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean isDataEnabledForReason(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.ACCESS_NETWORK_STATE&quot;, &quot;android.permission.READ_PHONE_STATE&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean isDataEnabledForReason(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.DATA_ENABLED_REASON_USER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_POLICY, android.telephony.TelephonyManager.DATA_ENABLED_REASON_CARRIER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_THERMAL}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean isDataRoamingEnabled()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.ACCESS_NETWORK_STATE&quot;, &quot;android.permission.READ_PHONE_STATE&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean isManualNetworkSelectionAllowed()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;, &quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean isModemEnabledForSlot(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean setNetworkSelectionModeManual(java.lang.String, boolean)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean setNetworkSelectionModeManual(java.lang.String, boolean, int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager boolean setNetworkSelectionModeManual(java.lang.String, boolean, int) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN, android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN, android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN, android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000, android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN, android.telephony.AccessNetworkConstants.AccessNetworkType.NGRAN}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getCallComposerStatus()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_ON, android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_OFF, android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_ON_NO_PICTURES}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getCallState()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.CALL_STATE_IDLE, android.telephony.TelephonyManager.CALL_STATE_RINGING, android.telephony.TelephonyManager.CALL_STATE_OFFHOOK}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getDataNetworkType()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getNetworkSelectionMode()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;, &quot;android.permission.READ_PRECISE_PHONE_STATE&quot;}" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_SELECTION_MODE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_SELECTION_MODE_AUTO, android.telephony.TelephonyManager.NETWORK_SELECTION_MODE_MANUAL}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getNetworkType()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getPreferredOpportunisticDataSubscription()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;, &quot;android.permission.READ_PHONE_STATE&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getSimState()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.SIM_STATE_UNKNOWN, android.telephony.TelephonyManager.SIM_STATE_ABSENT, android.telephony.TelephonyManager.SIM_STATE_PIN_REQUIRED, android.telephony.TelephonyManager.SIM_STATE_PUK_REQUIRED, android.telephony.TelephonyManager.SIM_STATE_NETWORK_LOCKED, android.telephony.TelephonyManager.SIM_STATE_READY, android.telephony.TelephonyManager.SIM_STATE_NOT_READY, android.telephony.TelephonyManager.SIM_STATE_PERM_DISABLED, android.telephony.TelephonyManager.SIM_STATE_CARD_IO_ERROR, android.telephony.TelephonyManager.SIM_STATE_CARD_RESTRICTED}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getSimState(int)">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.SIM_STATE_UNKNOWN, android.telephony.TelephonyManager.SIM_STATE_ABSENT, android.telephony.TelephonyManager.SIM_STATE_PIN_REQUIRED, android.telephony.TelephonyManager.SIM_STATE_PUK_REQUIRED, android.telephony.TelephonyManager.SIM_STATE_NETWORK_LOCKED, android.telephony.TelephonyManager.SIM_STATE_READY, android.telephony.TelephonyManager.SIM_STATE_NOT_READY, android.telephony.TelephonyManager.SIM_STATE_PERM_DISABLED, android.telephony.TelephonyManager.SIM_STATE_CARD_IO_ERROR, android.telephony.TelephonyManager.SIM_STATE_CARD_RESTRICTED}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getSubscriptionId(android.telecom.PhoneAccountHandle)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int getVoiceNetworkType()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN, android.telephony.TelephonyManager.NETWORK_TYPE_GPRS, android.telephony.TelephonyManager.NETWORK_TYPE_EDGE, android.telephony.TelephonyManager.NETWORK_TYPE_UMTS, android.telephony.TelephonyManager.NETWORK_TYPE_CDMA, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_0, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_A, android.telephony.TelephonyManager.NETWORK_TYPE_1xRTT, android.telephony.TelephonyManager.NETWORK_TYPE_HSDPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSUPA, android.telephony.TelephonyManager.NETWORK_TYPE_HSPA, android.telephony.TelephonyManager.NETWORK_TYPE_IDEN, android.telephony.TelephonyManager.NETWORK_TYPE_EVDO_B, android.telephony.TelephonyManager.NETWORK_TYPE_LTE, android.telephony.TelephonyManager.NETWORK_TYPE_EHRPD, android.telephony.TelephonyManager.NETWORK_TYPE_HSPAP, android.telephony.TelephonyManager.NETWORK_TYPE_GSM, android.telephony.TelephonyManager.NETWORK_TYPE_TD_SCDMA, android.telephony.TelephonyManager.NETWORK_TYPE_IWLAN, android.telephony.TelephonyManager.NETWORK_TYPE_NR}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int isMultiSimSupported()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.MULTISIM_ALLOWED, android.telephony.TelephonyManager.MULTISIM_NOT_SUPPORTED_BY_HARDWARE, android.telephony.TelephonyManager.MULTISIM_NOT_SUPPORTED_BY_CARRIER}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager int setForbiddenPlmns(java.util.List<java.lang.String>)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getDeviceId()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getDeviceId(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getDeviceSoftwareVersion()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getGroupIdLevel1()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getImei()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getImei(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getLine1Number()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="anyOf" val="{&quot;android.permission.READ_PHONE_STATE&quot;, &quot;android.permission.READ_SMS&quot;, &quot;android.permission.READ_PHONE_NUMBERS&quot;}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getManualNetworkSelectionPlmn()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRECISE_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getMeid()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getMeid(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getNai()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getSimSerialNumber()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getSubscriberId()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getVisualVoicemailPackageName()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getVoiceMailAlphaTag()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String getVoiceMailNumber()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.lang.String[] getForbiddenPlmns()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.util.List&lt;android.telephony.CellInfo&gt; getAllCellInfo()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_FINE_LOCATION&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.util.List&lt;android.telephony.UiccCardInfo&gt; getUiccCardsInfo()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PRIVILEGED_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.util.List&lt;java.lang.String&gt; getEquivalentHomePlmns()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.util.Map&lt;java.lang.Integer,java.util.List&lt;android.telephony.emergency.EmergencyNumber&gt;&gt; getEmergencyNumberList()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.util.Map&lt;java.lang.Integer,java.util.List&lt;android.telephony.emergency.EmergencyNumber&gt;&gt; getEmergencyNumberList(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.READ_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager java.util.Map&lt;java.lang.Integer,java.util.List&lt;android.telephony.emergency.EmergencyNumber&gt;&gt; getEmergencyNumberList(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_POLICE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_AMBULANCE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_MIEC, android.telephony.emergency.EmergencyNumber.EMERGENCY_SERVICE_CATEGORY_AIEC}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void clearSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void requestCellInfoUpdate(java.util.concurrent.Executor, android.telephony.TelephonyManager.CellInfoCallback)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_FINE_LOCATION&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void sendUssdRequest(java.lang.String, android.telephony.TelephonyManager.UssdResponseCallback, android.os.Handler)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.CALL_PHONE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void setCallComposerStatus(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void setCallComposerStatus(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_ON, android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_OFF, android.telephony.TelephonyManager.CALL_COMPOSER_STATUS_ON_NO_PICTURES}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void setDataEnabled(boolean)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void setDataEnabledForReason(int, boolean)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void setDataEnabledForReason(int, boolean) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.DATA_ENABLED_REASON_USER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_POLICY, android.telephony.TelephonyManager.DATA_ENABLED_REASON_CARRIER, android.telephony.TelephonyManager.DATA_ENABLED_REASON_THERMAL}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void setNetworkSelectionModeAutomatic()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void setSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void switchMultiSimConfig(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.MODIFY_PHONE_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager void updateAvailableNetworks(java.util.List<android.telephony.AvailableNetworkInfo>, java.util.concurrent.Executor, java.util.function.Consumer<java.lang.Integer>) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_SUCCESS, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_ABORTED, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION, android.telephony.TelephonyManager.UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyManager.CellInfoCallback void onError(int, java.lang.Throwable) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.TelephonyManager.CellInfoCallback.ERROR_TIMEOUT, android.telephony.TelephonyManager.CellInfoCallback.ERROR_MODEM_ERROR}" />
    </annotation>
  </item>
  <item name="android.telephony.TelephonyScanManager.NetworkScanCallback void onError(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.telephony.NetworkScan.ERROR_MODEM_ERROR, android.telephony.NetworkScan.ERROR_INVALID_SCAN, android.telephony.NetworkScan.ERROR_MODEM_UNAVAILABLE, android.telephony.NetworkScan.ERROR_UNSUPPORTED, android.telephony.NetworkScan.ERROR_RADIO_INTERFACE_ERROR, android.telephony.NetworkScan.ERROR_INVALID_SCANID, android.telephony.NetworkScan.ERROR_INTERRUPTED}" />
    </annotation>
  </item>
  <item name="android.telephony.VisualVoicemailService void onCellServiceConnected(android.telephony.VisualVoicemailService.VisualVoicemailTask, android.telecom.PhoneAccountHandle)">
    <annotation name="androidx.annotation.MainThread"/>
  </item>
  <item name="android.telephony.VisualVoicemailService void onSimRemoved(android.telephony.VisualVoicemailService.VisualVoicemailTask, android.telecom.PhoneAccountHandle)">
    <annotation name="androidx.annotation.MainThread"/>
  </item>
  <item name="android.telephony.VisualVoicemailService void onSmsReceived(android.telephony.VisualVoicemailService.VisualVoicemailTask, android.telephony.VisualVoicemailSms)">
    <annotation name="androidx.annotation.MainThread"/>
  </item>
  <item name="android.telephony.VisualVoicemailService void onStopped(android.telephony.VisualVoicemailService.VisualVoicemailTask)">
    <annotation name="androidx.annotation.MainThread"/>
  </item>
</root>

