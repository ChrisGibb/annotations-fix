<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.net.ConnectivityDiagnosticsManager.ConnectivityReport KEY_NETWORK_PROBES_ATTEMPTED_BITMASK">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_DNS, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_HTTP, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_HTTPS, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_FALLBACK, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_PRIVATE_DNS}" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityDiagnosticsManager.ConnectivityReport KEY_NETWORK_PROBES_SUCCEEDED_BITMASK">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_DNS, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_HTTP, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_HTTPS, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_FALLBACK, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_PROBE_PRIVATE_DNS}" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityDiagnosticsManager.ConnectivityReport KEY_NETWORK_VALIDATION_RESULT">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_VALIDATION_RESULT_INVALID, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_VALIDATION_RESULT_VALID, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_VALIDATION_RESULT_PARTIALLY_VALID, android.net.ConnectivityDiagnosticsManager.ConnectivityReport.NETWORK_VALIDATION_RESULT_SKIPPED}" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityDiagnosticsManager.DataStallReport DataStallReport(android.net.Network, long, int, android.net.LinkProperties, android.net.NetworkCapabilities, android.os.PersistableBundle) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.ConnectivityDiagnosticsManager.DataStallReport.DETECTION_METHOD_DNS_EVENTS, android.net.ConnectivityDiagnosticsManager.DataStallReport.DETECTION_METHOD_TCP_METRICS}" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.LinkProperties getLinkProperties(android.net.Network)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.Network getActiveNetwork()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.NetworkInfo getActiveNetworkInfo()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.NetworkInfo getNetworkInfo(android.net.Network)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.NetworkInfo getNetworkInfo(int)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.NetworkInfo[] getAllNetworkInfo()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager android.net.Network[] getAllNetworks()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager boolean isActiveNetworkMetered()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager int getMultipathPreference(android.net.Network)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.net.ConnectivityManager.MULTIPATH_PREFERENCE_HANDOVER, android.net.ConnectivityManager.MULTIPATH_PREFERENCE_RELIABILITY, android.net.ConnectivityManager.MULTIPATH_PREFERENCE_PERFORMANCE}" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager int getNetworkPreference()">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager int getRestrictBackgroundStatus()">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="false" />
      <val name="value" val="{android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED, android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED, android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED}" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager void registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback, android.os.Handler)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager void registerNetworkCallback(android.net.NetworkRequest, android.app.PendingIntent)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager void registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager void registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback, android.os.Handler)">
    <annotation name="androidx.annotation.RequiresPermission">
      <val name="value" val="&quot;android.permission.ACCESS_NETWORK_STATE&quot;" />
    </annotation>
  </item>
  <item name="android.net.ConnectivityManager.NetworkCallback NetworkCallback(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="flag" val="true" />
      <val name="value" val="{android.net.ConnectivityManager.NetworkCallback.FLAG_INCLUDE_LOCATION_INFO}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver void query(android.net.Network, java.lang.String, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super java.util.List&lt;java.net.InetAddress&gt;&gt;) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.TYPE_A, android.net.DnsResolver.TYPE_AAAA}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver void query(android.net.Network, java.lang.String, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super java.util.List&lt;java.net.InetAddress&gt;&gt;) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver void query(android.net.Network, java.lang.String, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super java.util.List&lt;java.net.InetAddress&gt;&gt;) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver void rawQuery(android.net.Network, byte[], int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver void rawQuery(android.net.Network, java.lang.String, int, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 2">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.CLASS_IN}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver void rawQuery(android.net.Network, java.lang.String, int, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 3">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.TYPE_A, android.net.DnsResolver.TYPE_AAAA}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver void rawQuery(android.net.Network, java.lang.String, int, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver.Callback&lt;? super byte[]&gt;) 4">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.FLAG_EMPTY, android.net.DnsResolver.FLAG_NO_RETRY, android.net.DnsResolver.FLAG_NO_CACHE_STORE, android.net.DnsResolver.FLAG_NO_CACHE_LOOKUP}" />
    </annotation>
  </item>
  <item name="android.net.DnsResolver.DnsException code">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.DnsResolver.ERROR_PARSE, android.net.DnsResolver.ERROR_SYSTEM}" />
    </annotation>
  </item>
  <item name="android.net.IpPrefix int getPrefixLength()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="128" />
    </annotation>
  </item>
  <item name="android.net.IpSecAlgorithm IpSecAlgorithm(java.lang.String, byte[]) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.IpSecAlgorithm.CRYPT_AES_CTR, android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.IpSecAlgorithm.AUTH_AES_XCBC, android.net.IpSecAlgorithm.AUTH_AES_CMAC, android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.IpSecAlgorithm.AUTH_CRYPT_CHACHA20_POLY1305}" />
    </annotation>
  </item>
  <item name="android.net.IpSecAlgorithm IpSecAlgorithm(java.lang.String, byte[], int) 0">
    <annotation name="androidx.annotation.StringDef">
      <val name="value" val="{android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.IpSecAlgorithm.CRYPT_AES_CTR, android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.IpSecAlgorithm.AUTH_AES_XCBC, android.net.IpSecAlgorithm.AUTH_AES_CMAC, android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.IpSecAlgorithm.AUTH_CRYPT_CHACHA20_POLY1305}" />
    </annotation>
  </item>
  <item name="android.net.IpSecManager void applyTransportModeTransform(java.io.FileDescriptor, int, android.net.IpSecTransform) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}" />
    </annotation>
  </item>
  <item name="android.net.IpSecManager void applyTransportModeTransform(java.net.DatagramSocket, int, android.net.IpSecTransform) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}" />
    </annotation>
  </item>
  <item name="android.net.IpSecManager void applyTransportModeTransform(java.net.Socket, int, android.net.IpSecTransform) 1">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.IpSecManager.DIRECTION_IN, android.net.IpSecManager.DIRECTION_OUT}" />
    </annotation>
  </item>
  <item name="android.net.LinkAddress int getPrefixLength()">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="128" />
    </annotation>
  </item>
  <item name="android.net.MacAddress int getAddressType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.MacAddress.TYPE_UNICAST, android.net.MacAddress.TYPE_MULTICAST, android.net.MacAddress.TYPE_BROADCAST}" />
    </annotation>
  </item>
  <item name="android.net.NetworkCapabilities boolean hasCapability(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE}" />
    </annotation>
  </item>
  <item name="android.net.NetworkCapabilities boolean hasTransport(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN}" />
    </annotation>
  </item>
  <item name="android.net.NetworkCapabilities int[] getCapabilities()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE}" />
    </annotation>
  </item>
  <item name="android.net.NetworkRequest boolean hasCapability(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE}" />
    </annotation>
  </item>
  <item name="android.net.NetworkRequest boolean hasTransport(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN}" />
    </annotation>
  </item>
  <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder addCapability(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE}" />
    </annotation>
  </item>
  <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder addTransportType(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN}" />
    </annotation>
  </item>
  <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder removeCapability(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.NET_CAPABILITY_MMS, android.net.NetworkCapabilities.NET_CAPABILITY_SUPL, android.net.NetworkCapabilities.NET_CAPABILITY_DUN, android.net.NetworkCapabilities.NET_CAPABILITY_FOTA, android.net.NetworkCapabilities.NET_CAPABILITY_IMS, android.net.NetworkCapabilities.NET_CAPABILITY_CBS, android.net.NetworkCapabilities.NET_CAPABILITY_WIFI_P2P, android.net.NetworkCapabilities.NET_CAPABILITY_IA, android.net.NetworkCapabilities.NET_CAPABILITY_RCS, android.net.NetworkCapabilities.NET_CAPABILITY_XCAP, android.net.NetworkCapabilities.NET_CAPABILITY_EIMS, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED, android.net.NetworkCapabilities.NET_CAPABILITY_TRUSTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_VPN, android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED, android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED, android.net.NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED, android.net.NetworkCapabilities.NET_CAPABILITY_MCX, android.net.NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED, android.net.NetworkCapabilities.NET_CAPABILITY_ENTERPRISE}" />
    </annotation>
  </item>
  <item name="android.net.NetworkRequest.Builder android.net.NetworkRequest.Builder removeTransportType(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.NetworkCapabilities.TRANSPORT_CELLULAR, android.net.NetworkCapabilities.TRANSPORT_WIFI, android.net.NetworkCapabilities.TRANSPORT_BLUETOOTH, android.net.NetworkCapabilities.TRANSPORT_ETHERNET, android.net.NetworkCapabilities.TRANSPORT_VPN, android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE, android.net.NetworkCapabilities.TRANSPORT_LOWPAN}" />
    </annotation>
  </item>
  <item name="android.net.PlatformVpnProfile int getType()">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.PlatformVpnProfile.TYPE_IKEV2_IPSEC_USER_PASS, android.net.PlatformVpnProfile.TYPE_IKEV2_IPSEC_PSK, android.net.PlatformVpnProfile.TYPE_IKEV2_IPSEC_RSA}" />
    </annotation>
  </item>
  <item name="android.net.SocketKeepalive void start(int) 0">
    <annotation name="androidx.annotation.IntRange">
      <val name="from" val="10" />
      <val name="to" val="3600" />
    </annotation>
  </item>
  <item name="android.net.SocketKeepalive.Callback void onError(int) 0">
    <annotation name="androidx.annotation.IntDef">
      <val name="value" val="{android.net.SocketKeepalive.ERROR_INVALID_NETWORK, android.net.SocketKeepalive.ERROR_INVALID_IP_ADDRESS, android.net.SocketKeepalive.ERROR_INVALID_PORT, android.net.SocketKeepalive.ERROR_INVALID_LENGTH, android.net.SocketKeepalive.ERROR_INVALID_INTERVAL, android.net.SocketKeepalive.ERROR_INVALID_SOCKET, android.net.SocketKeepalive.ERROR_SOCKET_NOT_IDLE}" />
    </annotation>
  </item>
</root>

